#Unsorted Scripted effects:

#General effect for extending or adding province modifier
#Province Scope
add_or_extend_province_modifier_effect = {
	if = {
		limit = {
			has_province_modifier = $MODIFIER$
		}
		extend_province_modifier = { name = $MODIFIER$ duration = $DURATION$ }
	}
	else = {
		add_province_modifier = { name = $MODIFIER$ duration = $DURATION$ }
	}
}

#Used in army professionalism event:
#used where FROM is a province and ROOT is a country, ie onaction for provinces fallen
add_loot_from_province_effect = { 
	if = {
		limit = {
			FROM = {
				NOT = { development = 18 }
			}
		}
		add_treasury = 115
		add_mil_power = 15
	}
	if = {
		limit = {
			FROM = {
				development = 18
				NOT = { development = 21 }
			}
		}
		add_treasury = 135
		add_mil_power = 15
	}
	if = {
		limit = {
			FROM = {
				development = 21
				NOT = { development = 24 }
			}
		}
		add_treasury = 155
		add_mil_power = 25
	}
	if = {
		limit = {
			FROM = {
				development = 24
				NOT = { development = 27 }
			}
		}
		add_treasury = 180
		add_mil_power = 30
	}
	if = {
		limit = {
			FROM = {
				development = 27
				NOT = { development = 30 }
			}
		}
		add_treasury = 210
		add_mil_power = 40
	}
	if = {
		limit = {
			FROM = {
				development = 30
				NOT = { development = 33 }
			}
		}
		add_treasury = 230
		add_mil_power = 50
	}
	if = {
		limit = {
			FROM = {
				development = 33
			}
		}
		add_treasury = 250
		add_mil_power = 55
	}
}

#Generalized version of the same effect, for use in province scope.
#used where ROOT is a province, ie onaction for provinces fallen
#$LOOTER$ is the scope of the tag performing the Looting (so for instance owner)
add_loot_from_rich_province_general_effect = { 
	add_devastation = 80
	remove_loot = {
		who = $LOOTER$
		amount = 1000
	}
	if = {
		limit = {
			NOT = { development = 18 }
		}
		$LOOTER$ = {
			add_treasury = 400
			add_mil_power = 15
		}
	}
	if = {
		limit = {
			development = 18
			NOT = { development = 21 }
		}
		$LOOTER$ = {
			add_treasury = 435
			add_mil_power = 15
		}
	}
	if = {
		limit = {
			development = 21
			NOT = { development = 24 }
		}
		$LOOTER$ = {
			add_treasury = 455
			add_mil_power = 25
		}
	}
	if = {
		limit = {
			development = 24
			NOT = { development = 27 }
		}
		$LOOTER$ = {
			add_treasury = 480
			add_mil_power = 30
		}
	}
	if = {
		limit = {
			development = 27
			NOT = { development = 30 }
		}
		$LOOTER$ = {
			add_treasury = 510
			add_mil_power = 40
		}
	}
	if = {
		limit = {
			development = 30
			NOT = { development = 33 }
		}
		$LOOTER$ = {
			add_treasury = 530
			add_mil_power = 50
		}
	}
	if = {
		limit = {
			development = 33
		}
		$LOOTER$ = {
			add_treasury = 550
			add_mil_power = 55
		}
	}
}

#Religious Schools:
#Country Scope
clear_religious_scholar_modifiers_effect = {
	remove_country_modifier = hanafi_scholar_modifier
	remove_country_modifier = hanbali_scholar_modifier
	remove_country_modifier = maliki_scholar_modifier
	remove_country_modifier = shafii_scholar_modifier
	remove_country_modifier = ismaili_scholar_modifier
	remove_country_modifier = jafari_scholar_modifier
	remove_country_modifier = zaidi_scholar_modifier
}

#Move capital along with all that also needs to be done. Used in capital decisions.
#THIS = Province Scope, ROOT = Country Scope
move_capital_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			ROOT = {
				is_part_of_hre = no
			}
		}
		set_in_empire = no
		emperor = {
			add_opinion = {
				who = ROOT
				modifier = hre_province_left
			}
		}
		add_imperial_influence = -1
	}
	if = {
		limit = { is_capital = no }
		ROOT = {
			set_capital = PREV
		}
	}
}

#Same as move_capital_effect, but for when you want to move PREV's rather than ROOT's capital
#THIS = Province Scope, PREV = Country Scope
prev_move_capital_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			PREV = {
				is_part_of_hre = no
			}
		}
		set_in_empire = no
		PREV = {
			emperor = {
				add_opinion = {
					who = PREV
					modifier = hre_province_left
				}
			}
		}
		add_imperial_influence = -1
	}
	if = {
		limit = { is_capital = no }
		PREV = {
			set_capital = PREV
		}
	}
}

remove_non_electors_emperors_from_empire_effect = {
	if = {
		limit = {
			is_part_of_hre = yes
			is_elector = no
			is_emperor = no
		}
		custom_tooltip = remove_non_electors_emperors_from_empire_effect_tooltip
		hidden_effect = {
			every_owned_province = {
				limit = {
					is_part_of_hre = yes
				}
				set_in_empire = no
			}
		}
	}
}

abolish_slavery_effect = {
	custom_tooltip = abolished_slavery_act_tooltip
	hidden_effect = {
		every_owned_province = {
			limit = {
				trade_goods = slaves
			}
			change_trade_goods = unknown
			remove_building = tradecompany
		}
	}
}


add_vassalise_cb_effect = {
	add_casus_belli = {
		type = cb_vassalize_mission
		months = 300
		target = ROOT
	}
}


remove_vassalise_cb_effect = {
	if = {
		limit = {
			has_casus_belli = {
				type = cb_vassalize_mission
				target = event_target:agenda_country
			}
		}
		remove_casus_belli = {
			type = cb_vassalize_mission
			target = event_target:agenda_country
		}
	}
}

#Ends the normal Revolution disaster (if you have it) and clears all related modifiers and flags
clear_standard_revolution_elements_effect = {
	if = {
		limit = {
			has_disaster = revolution
		}
		end_disaster = revolution
	}

	clr_country_flag = religious_revolution
	clr_country_flag = serfdom
	clr_country_flag = social_reform
	clr_country_flag = royal_bureaucracy
	clr_country_flag = deplorable_reign
	clr_country_flag = road_to_bankruptcy
	clr_country_flag = financial_crisis
	clr_country_flag = revolutionary_philosopher
	remove_country_modifier = religious_intolerance
	remove_country_modifier = religious_tolerance
	remove_country_modifier = restrict_serfdom
	remove_country_modifier = enforce_serfdom
	remove_country_modifier = suppress_free_thinkers
	remove_country_modifier = bureaucratic_reduction
	remove_country_modifier = bureaucratic_expansion
	remove_country_modifier = support_monarch
	remove_country_modifier = oppose_monarch
	remove_country_modifier = mint_money
	remove_country_modifier = fight_inflation
	remove_country_modifier = disarmament
	remove_country_modifier = financial_disaster
}

enact_revolution_effect = {
	disband_rebels = revolutionary_rebels
	disband_rebels = anti_tax_rebels
	hidden_effect = {
		if = {	
			limit = {
				any_subject_country = {
					has_country_modifier = colony_inspired_by_revolution
				}
			}
			every_subject_country = {
				remove_country_modifier = colony_inspired_by_revolution
			}
		}
		if = {
			limit = {
				OR = {
					has_disaster = french_revolution
					has_country_flag = use_french_disaster_exile_effect
				}
				has_regency = no
			}
			set_country_flag = ruler_of_france_exiled
		}
		if = {
			limit = {
				OR = {
					has_disaster = french_revolution
					has_country_flag = use_french_disaster_exile_effect
				}
				has_heir = yes
			}
			exile_heir_as = heir_of_france
			set_country_flag = heir_of_france_exiled
		}
	}
	if = {
		limit = { is_emperor_of_china = yes }
		dismantle_empire_of_china = yes
		set_global_flag = empire_of_china_dismantled
	}
	if = {
		limit = { NOT = { government = republic } }
		change_government_to_republic = yes
	}
	if = {
		limit = {
			revolution_target_exists = yes
		}
		add_government_reform = junior_revolutionary_republic_reform
	}
	else = {
		add_government_reform = revolutionary_republic_reform
		set_revolution_target = ROOT
	}
	if = {
		limit = { has_reform = parliamentary_reform }
		remove_government_reform = parliamentary_reform
	}
	if = {
		limit = { has_reform = states_general_reform }
		remove_government_reform = states_general_reform
	}
	if = {
		limit = {
			OR = {
				has_disaster = french_revolution
				has_country_flag = use_french_disaster_exile_effect
			}
		}
		hidden_effect = {
			exile_ruler_as = { name = ruler_of_france }
		}
	}
	else = {
		kill_ruler = yes
	}

	add_yearly_manpower = 5

	if = {
		limit = {
			has_country_flag = revolution_disaster_reactionary
		}
		add_country_modifier = {
			name = reactionaries_failed
			duration = 9125
		}
	}

	if = {
		limit = {
			has_country_flag = revolution_disaster_immediate_revolution
		}
		clr_country_flag = revolution_disaster_immediate_revolution
	}
	set_country_flag = revolutionary_republic_flag
	
	if = { 
		limit = { tag = FRA has_dlc = "Domination" } 
		swap_non_generic_missions = yes
	}
}

#province scope
add_half_industrialization_effect = {
	if = {
		limit = {
			is_institution_enabled = industrialization
			NOT = { industrialization = 100 }
		}
		add_institution_embracement = {
			which = industrialization
			value = 50
		}
	}
}

#province scope
add_quarter_industrialization_effect = {
	if = {
		limit = {
			is_institution_enabled = industrialization
			NOT = { industrialization = 100 }
		}
		add_institution_embracement = {
			which = industrialization
			value = 25
		}
	}
}

#province scope, chooses which random monarch point bonus to give for agendas
choose_random_development_bonus_effect = {
	random_list = {
		1 = { set_province_flag = add_base_tax_flag }
		1 = { set_province_flag = add_base_production_flag }
		1 = { set_province_flag = add_base_manpower_flag }
	}
}

apply_random_development_bonus_bonus_effect = {
	trigger_switch = {
		on_trigger = has_province_flag
		add_base_tax_flag = { add_base_tax = 1 }
		add_base_production_flag = { add_base_production = 1 }
		add_base_manpower_flag = { add_base_manpower = 1 }
	}
	clear_random_development_bonus_flags_effect = yes
}

clear_random_development_bonus_flags_effect = {
	clr_province_flag = add_base_tax_flag
	clr_province_flag = add_base_production_flag
	clr_province_flag = add_base_manpower_flag
}
#province scope, should be used whenever the revolution is removed from a province
remove_revolution_from_province_effect = {
	hidden_effect = { set_revolution_in_province = no }
	custom_tooltip = no_spread_here_for_15_years_tt
	add_province_modifier = {
		name = no_revolution_here_dummy
		duration = 5475
		hidden = yes
	}
}


spawn_small_scaled_rebels = {
	#always specify type
	#specify saved_name = <saved_name> if you want to use one of those
	#specify leader and leader_dynasty if you want to do it that way
	#otherwise state "no_defined_leader = yes"
	if = {
		limit = {
			owner = {
				total_development = 1000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 500
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 200
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 1.5
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 1.5
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 1.5
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else = {
		[[no_defined_leader]
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 1
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 1
				type = $type$
				leader = $saved_name$
			}
		]
	}
}

spawn_large_scaled_rebels = {
	#always specify type
	#specify saved_name = <saved_name> if you want to use one of those
	#specify leader and leader_dynasty if you want to do it that way
	#otherwise state "no_defined_leader = yes"
	if = {
		limit = {
			owner = {
				total_development = 2000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 1000
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
			spawn_rebels = {
				size = 1
				type = $type$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 500
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 3
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 3
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else_if = {
		limit = {
			owner = {
				total_development = 200
			}
		}
		[[no_defined_leader]
			spawn_rebels = {
				size = 2.5
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2.5
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2.5
				type = $type$
				leader = $saved_name$
			}
		]
	}
	else = {
		[[no_defined_leader]
			spawn_rebels = {
				size = 2
				type = $type$
			}
		]
		[[leader]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $leader$
				leader_dynasty = $leader_dynasty$
			}
		]
		[[saved_name]
			spawn_rebels = {
				size = 2
				type = $type$
				leader = $saved_name$
			}
		]
	}
}


#country scope. Currently just applies to the Hansa, if future ones are added, update the flags
#Used in nation formation decisions
restore_country_name_effect = {
	hidden_effect = {
		if = {
			limit = {
				has_country_flag = is_hanseatic_league_flag
			}
			restore_country_name = yes
			clr_country_flag = is_hanseatic_league_flag
		}
	}
}

#Used to clone the nation when forming a colonial tag.
restore_old_nation_on_formation_effect = {
	if = {
		limit = {
			NOT = { is_former_colonial_nation = yes }
		}
		custom_tooltip = loses_old_world_provs_tt
	}
	hidden_effect = {
		if = {
			limit = {
				has_country_flag = was_not_former_colonial_nation
			}
			every_province = {
				limit = {
					is_core = ROOT
					OR = {
						continent = europe
						continent = asia
						continent = africa
					}
				}
				add_core = event_target:old_tag_target
				remove_core = ROOT
			}
			release = event_target:old_tag_target
			event_target:old_tag_target = { swap_non_generic_missions = yes }
			ROOT = { set_country_flag = old_world_to_new_world_flag }
			ROOT = { set_country_flag = no_colonial_nations }
			every_subject_country = {
				limit = {
					capital_scope = { 
						OR = {
							continent = europe
							continent = asia
							continent = africa
						}
					}
				}
				grant_independence = yes
			}
			every_subject_country = {
				limit = {
					OR = {
						is_subject_of_type = colony
						is_subject_of_type = crown_colony
						is_subject_of_type = private_enterprise
						is_subject_of_type = self_governing_colony
					}
				}
				ROOT = { inherit = PREV }
			}
			if = {
				limit = {
					NOT = { government_rank = 2 }
				}
				event_target:old_tag_target = { set_government_rank = 1 }
			}
			else_if = {
				limit = {
					government_rank = 3
				}
				event_target:old_tag_target = { set_government_rank = 3 }
			}
			if = {
				limit = {
					has_reform = shogunate
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = shogunate
					#set_legacy_government = shogunate_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = indep_daimyo
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = indep_daimyo
					#set_legacy_government = indep_daimyo_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = english_monarchy
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = english_monarchy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = elective_monarchy
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = elective_monarchy
					#set_legacy_government = elective_monarchy_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = ottoman_government
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = ottoman_government
					#set_legacy_government = ottoman_government_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = indian_sultanate_reform
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = indian_sultanate_reform
					#set_legacy_government = iqta_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
				if = {
					limit = {
						has_reform = mughal_government
					}
					event_target:old_tag_target = {
						add_government_reform = mughal_government
					}
				}
			}
			else_if = {
				limit = {
					has_reform = mamluk_government
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = mamluk_government
					#set_legacy_government = mamluk_government_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = iqta
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = iqta
					#set_legacy_government = iqta_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = prussian_monarchy_base
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = prussian_monarchy_base
					#set_legacy_government = prussian_monarchy_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = monarchy
				}
				event_target:old_tag_target = {
					change_government = monarchy
					add_government_reform = feudalism_reform
					#set_legacy_government = monarchy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = venice_merchants_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = venice_merchants_reform
					#set_legacy_government = venetian_merchant_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = veche_republic
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = veche_republic
					#set_legacy_government = veche_republic_legacy
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = theocracy
					has_reform = united_cantons_reform
				}
				event_target:old_tag_target = {
					change_government = theocracy
					add_government_reform = united_cantons_reform
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = united_cantons_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = united_cantons_reform
					#set_legacy_government = united_cantons_legacy
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = merchants_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = merchants_reform
					#set_legacy_government = merchant_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = prussian_republic_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = prussian_republic_reform
					#set_legacy_government = prussian_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = signoria_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = signoria_reform
					#set_legacy_government = signoria
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = ambrosian_republic
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = ambrosian_republic
					#set_legacy_government = ambrosian_republic_legacy
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = dutch_republic
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = dutch_republic
					#set_legacy_government = dutch_republic_legacy
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = cossacks_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = cossacks_reform
					#set_legacy_government = cossacks_legacy_reform
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = noble_elite_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = noble_elite_reform
					#set_legacy_government = noble_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = peasants_republic
				}
				event_target:old_tag_target = {
					change_government = republic
					#set_legacy_government = peasants_republic_legacy
					add_government_reform = peasants_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					has_reform = pirate_republic_reform
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = pirate_republic_reform
					#set_legacy_government = pirate_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = republic
				}
				event_target:old_tag_target = {
					change_government = republic
					add_government_reform = oligarchy_reform
					#set_legacy_government = noble_republic
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = theocracy
					has_reform = monastic_order_reform
				}
				event_target:old_tag_target = {
					change_government = theocracy
					add_government_reform = monastic_order_reform
					#set_legacy_government = monastic_order_government
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = theocracy
				}
				event_target:old_tag_target = {
					change_government = theocracy
					add_government_reform = leading_clergy_reform
					#set_legacy_government = theocratic_government
					define_ruler = {
						claim = 95
					}
				}
			}
			else_if = {
				limit = {
					government = tribal
					has_reform = steppe_horde
				}
				event_target:old_tag_target = {
					change_government = tribal
					add_government_reform = steppe_horde
					#set_legacy_government = steppe_horde_legacy
					define_ruler = {
						dynasty = ROOT
						claim = 95
					}
				}
			}
			else = {
				event_target:old_tag_target = {
					change_government = tribal
					add_government_reform = tribal_federation
					#set_legacy_government = tribal_democracy_legacy
				}
			}
		}
	}
}

change_government_to_republic = {
	if = {
		limit = {
			NOT = { government = republic }
		}
		change_government = republic
		change_government_reform_progress = -200
	}
}

change_government_to_monarchy = {
	if = {
		limit = {
			NOT = { government = monarchy }
		}
		if = {
			limit = {
				government = republic
			}
			change_government = monarchy
			change_government_reform_progress = -400
		}
		else = {
			change_government = monarchy
			change_government_reform_progress = -200
		}
	}
}

change_government_to_theocracy = {
	if = {
		limit = {
			NOT = { government = theocracy }
		}
		if = {
			limit = {
				government = republic
			}
			change_government = theocracy
			change_government_reform_progress = -400
		}
		else = {
			change_government = theocracy
			change_government_reform_progress = -200
		}
	}
}

change_government_to_tribal = {
	if = {
		limit = {
			NOT = { government = tribal }
		}
		change_government = tribal
		change_government_reform_progress = -800
	}
}

add_ruler_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = totemism 
		}
		add_ruler_personality = ancestor_$key$_personality
	}
	else = {
		add_ruler_personality = $key$_personality
	}
}

add_heir_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = totemism 
		}
		add_heir_personality = ancestor_$key$_personality
	}
	else = {
		add_heir_personality = $key$_personality
	}
}

add_queen_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = totemism 
		}
		add_queen_personality = ancestor_$key$_personality
	}
	else = {
		add_queen_personality = $key$_personality
	}
}

remove_ruler_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = totemism 
		}
		remove_ruler_personality = ancestor_$key$_personality
	}
	else = {
		remove_ruler_personality = $key$_personality
	}
}

remove_heir_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = totemism 
		}
		remove_heir_personality = ancestor_$key$_personality
	}
	else = {
		remove_heir_personality = $key$_personality
	}
}

remove_queen_personality_ancestor = {
	# key = personality to test again
	if = {
		limit = { 
			has_dlc = "Leviathan"
			religion = totemism 
		}
		remove_queen_personality = ancestor_$key$_personality
	}
	else = {
		remove_queen_personality = $key$_personality
	}
}

#The three effects below are used for setting a great project to exact the tier
#I tried to combine the three effects into one single scripted effect, but I couldn't figure a way out to do the effect without having to do a lot of custom tooltip
#Sets monument tier 1 (has no effect if the monument is tier 1 or higher)
#Province scope
set_great_project_tier_1 = {
	if = {
		limit = {
			has_dlc = "Leviathan"
		}
		if = {
			limit = {
				has_great_project = {	#Asks the EXACT tier unlike other triggers
					type = $type$
					tier = 0
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 1
			}
		}
	}
}

#Sets monument tier 2 (has no effect if the monument is tier 2 or higher)
#Province scope
set_great_project_tier_2 = {
	if = {
		limit = {
			has_dlc = "Leviathan"
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 2
				}
			}
			random_list = {
				1 = { add_base_tax = 4 }
				1 = { add_base_production = 4 }
				1 = { add_base_manpower = 4 }
			}
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 1
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 2
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 1
			}
			random_list = {
				1 = { add_base_tax = 2 }
				1 = { add_base_production = 2 }
				1 = { add_base_manpower = 2 }
			}
		}
		if = {
			limit = {
				has_great_project = {	#Asks the EXACT tier unlike other triggers
					type = $type$
					tier = 0
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 1
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 2
			}
		}
	}
	else = {
		add_base_tax = 1
		add_base_production = 1
		add_base_manpower = 1
	}
}

#Sets monument tier 3 (has no effect if the monument is tier 3 or higher)
#Province scope
set_great_project_tier_3 = {
	if = {
		limit = {
			has_dlc = "Leviathan"
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 3
				}
			}
			random_list = {
				1 = { add_base_tax = 6 }
				1 = { add_base_production = 6 }
				1 = { add_base_manpower = 6 }
			}
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 2
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 3
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 1
			}
			random_list = {
				1 = { add_base_tax = 4 }
				1 = { add_base_production = 4 }
				1 = { add_base_manpower = 4 }
			}
		}
		if = {
			limit = {
				has_great_project = {
					type = $type$
					tier = 1
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 2
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 2
			}
			random_list = {
				1 = { add_base_tax = 2 }
				1 = { add_base_production = 2 }
				1 = { add_base_manpower = 2 }
			}
		}
		if = {
			limit = {
				has_great_project = {	#Asks the EXACT tier unlike other triggers
					type = $type$
					tier = 0
				}
				NOT = {
					has_great_project = {
						type = $type$
						tier = 1
					}
				}
			}
			add_great_project_tier = {
				type = $type$
				tier = 3
			}
		}
	}
	else = {
		add_base_tax = 2
		add_base_production = 2
		add_base_manpower = 2
	}
}

#Country effect
create_colony_mission_reward = {
	if = {
		limit = {
			$province$ = {
				is_empty = yes
			}
		}
		$province$ = {
			add_siberian_construction = 400
		}
		if = {
			limit = {
				has_age_ability = ab_colony_boost_development
			}
			$province$ = {
				add_base_tax = 1
				add_base_production = 1
				add_base_manpower = 1
			}
		}
	}
	else_if = {
		limit = {
			owns = $province$
		}
		$province$ = {
			add_base_tax = 1
			add_base_production = 1
			add_base_manpower = 1
		}
	}
	else_if = {
		limit = {
			NOT = { is_permanent_claim = $province$ }
		}
		add_permanent_claim = $province$
	}
}

#Country effect
seize_empty_province_effect = {
	if = {
		limit = {
			$province$ = {
				is_empty = yes
			}
		}
		$province$ = {
			cede_province = ROOT
			add_core = ROOT
		}
	}
	else_if = {
		limit = { NOT = { owns_or_non_sovereign_subject_of = $province$ } }
		add_core = $province$
	}
	else = {
		$province$ = {
			add_base_tax = 1
			add_base_production = 1
			add_base_manpower = 1
		}
	}
}

#Provine effect
create_colony_mission_reward_province = {
	if = {
		limit = {
			is_empty = yes
		}
		add_siberian_construction = 400
		if = {
			limit = {
				$country$ = {
					has_age_ability = ab_colony_boost_development
				}
			}
			add_base_tax = 1
			add_base_production = 1
			add_base_manpower = 1
		}
	}
	else_if = {
		limit = {
			owned_by = $country$
		}
		add_base_tax = 1
		add_base_production = 1
		add_base_manpower = 1
	}
	else_if = {
		limit = {
			NOT = { is_permanent_claim = $country$ }
		}
		add_permanent_claim = $country$
	}
}

#Province effect
remove_random_development = {
	if = {
		limit = {
			base_tax = 2
			base_production = 2
			base_manpower = 2
		}
		random_list = {
			33 = {
				add_base_tax = -1
			}
			33 = {
				add_base_production = -1
			}
			33 = {
				add_base_manpower = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
			base_production = 2
		}
		random_list = {
			50 = {
				add_base_tax = -1
			}
			50 = {
				add_base_production = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
			base_manpower = 2
		}
		random_list = {
			50 = {
				add_base_tax = -1
			}
			50 = {
				add_base_manpower = -1
			}
		}
	}
	else_if = {
		limit = {
			base_manpower = 2
			base_production = 2
		}
		random_list = {
			50 = {
				add_base_manpower = -1
			}
			50 = {
				add_base_production = -1
			}
		}
	}
	else_if = {
		limit = {
			base_tax = 2
		}
		add_base_tax = -1
	}
	else_if = {
		limit = {
			base_production = 2
		}
		add_base_production = -1
	}
	else_if = {
		limit = {
			base_manpower = 2
		}
		add_base_manpower = -1
	}
}

#Country effect
mal_add_disaster_stability = {
	custom_tooltip = mal_add_disaster_stability_tt
	hidden_effect = {
		if = {
			limit = {
				has_disaster = decline_of_mali
			}
			if = {
				limit = { NOT = { stability = 3 } }
				add_stability = 1
			}
			else = {
				add_adm_power = 50
			}
		}
	}
}

#Country effect
add_inflation_scaled_to_trade = {
	[[custom_tooltip] 
		custom_tooltip = $custom_tooltip$
	]
	#custom_tooltip = add_inflation_scaled_to_trade_tt	#Make sure to define an own custom tooltip for telling how much inflation per trade percantage should be given
	hidden_effect = {
		export_to_variable = {
			which = trade_income_variable
			value = trigger_value:trade_income_percentage
		}
		multiply_variable = {
			which = trade_income_variable
			value = 100
		}
		multiply_variable = {
			which = trade_income_variable
			value = $inflation$
		}
		while = {
			limit = {
				check_variable = {
					which = trade_income_variable
					value = 1
				}
			}
			add_inflation = 1
			subtract_variable = {
				which = trade_income_variable
				value = 1
			}
		}
		multiply_variable = {
			which = trade_income_variable
			value = 100
		}
		while = {
			limit = {
				check_variable = {
					which = trade_income_variable
					value = 1
				}
			}
			add_inflation = 0.01
			subtract_variable = {
				which = trade_income_variable
				value = 1
			}
		}
	}
}

#Country "effect"
mal_determine_offer_acceptance = {
	if = {
		limit = {
			mal_will_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_will_accept_offer
			}
		}
	}
	else_if = {
		limit = {
			mal_very_highly_to_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_will_probably_accept_offer
			}
		}
	}
	else_if = {
		limit = {
			mal_might_or_might_not_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_could_accept_offer
			}
		}
	}
	else_if = {
		limit = {
			mal_very_likely_to_not_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_will_probably_not_accept_offer
			}
		}
	}
	else_if = {
		limit = {
			mal_will_never_accept_offer = {
				province = $province$
			}
		}
		$province$ = {
			owner = {
				custom_tooltip = mal_will_naver_accept_offer
			}
		}
	}
	else = {
		$province$ = {
			owner = {
				custom_tooltip = mal_offer_outcome_unkonwn
			}
		}
	}
}

#Country effect
add_legitimacy_equivalent = {
	add_legitimacy = $amount$
	add_horde_unity = $amount$
	add_devotion = $amount$
	add_meritocracy = $amount$
	add_republican_tradition = $republican_tradition$	#This one is special because of how much republics scale with it
}

#Country effect
##########################################################
# Supports following privileges
# estate_burghers_hydraulic_rights
# estate_nobles_cawa_peace_keepers
# estate_nobles_cawa_offensive_fighters
# estate_burghers_control_over_the_mint
# estate_dhimmi_guarantee_of_traditions
# estate_church_yakobs_churches
# estate_nobles_grant_power_to_the_bashorun
# estate_burghers_forest_expansion
# estate_burghers_mountain_expansion
# estate_nobles_leidang_conscription
# estate_burghers_orthodox_tolerance
# estate_church_anti_heresy_act
# estate_nobles_religious_conscription
# estate_dhimmi_millet_system
# estate_burghers_the_new_middle_class
# estate_janissary_ottoman_vanguards
# estate_nobles_english_copyhold_tenure
# estate_burghers_autonomous_trade_companies
##########################################################
# When adding new privileges then make sure that a unlock_privilege_$estate_privilege$_tt is defined in the localization
# For checking if an estate privilege is unlocked already, use has_unlocked_estate_privilege = { estate_privilege = $estate_privilege$ }
# For localization write the following: "Enable the [Root.<Estate Name>] privilege '§Y<Privilege Name>§!'."
unlock_estate_privilege = {
	custom_tooltip = unlock_privilege_$estate_privilege$_tt
	hidden_effect = {
		set_country_flag = unlocked_privilege_$estate_privilege$
	}
}

#Country effect
##########################################################
# Supports following merc companies
# merc_oyo_cavalry
# merc_hakkapeliita_cavalry
# merc_prussian_volunteer_army
# merc_large_hakkapeliita_cavalry
# merc_guerilla_hakkapeliita_cavalry
# merc_elite_hakkapeliita_cavalry
# merc_schwarze_garde
# merc_hessian_jaegerkorps
# merc_doppelsoeldner
# merc_frisian_free_company
# merc_flemish_company
# merc_reislaufer
# merc_tatar_vanguard
##########################################################
# When adding a new merc company then make sure that a unlock_$merc_company$_tt is defined in the localization
# For checking if a merc company is unlocked already, use has_unlocked_merc_company = { merc_company = $merc_company$ }
# For localization write the following: "Unlock the mercenary company §Y<Merc Company>§! to recruit."
unlock_merc_company = {
	custom_tooltip = unlock_$merc_company$_tt
	hidden_effect = {
		set_country_flag = unlocked_$merc_company$
	}
	[[free_merc]
		custom_tooltip = costs_no_army_professionalism
	]
	[[global]
		custom_tooltip = global_merc_company
		hidden_effect = {
			set_global_flag = global_unlocked_$merc_company$
		}
	]
}

#Country effect
##########################################################
# Supports following church aspects
# anglican_aspect
# spread_the_book_of_common_prayer
unlock_church_aspect = {
	custom_tooltip = unlock_church_aspect_$church_aspect$_tt
	hidden_effect = {
		set_country_flag = unlocked_church_aspect_$church_aspect$
	}
}

#Same as above, but this time it makes a company unavailable
#Does not support any merc company yet
#lock_merc_company = {
#	custom_tooltip = lock_$merc_company$_tt
#	hidden_effect = {
#		clr_country_flag = unlocked_$merc_company$
#	}
#}

#Country effect
##########################################################
# Supports following government reforms
# prussian_monarchy_base
# prussian_republic_reform
# prussian_theocratic_reform
# holy_horde_reform
# crusading_kingdom_reform
# militarized_crusader_order_reform
# allotment_system
# expanded_devshirme_system_reform
# ottoman_siyasah_tax_reform
# fiqh_laws_reform
# sufism_decree_reform
# ottoman_conscription_reform
# reformed_ottoman_conscription_reform
# mansure_army_reform
# janissary_military_reform
# standardized_millets_reform
# modernized_ottoman_government
# reorganized_ottoman_government
# russian_empire_reform
# great_russian_republic_reform
# professional_navy_reform
# thalassocracy_reform
# governing_senate_reform
# enforced_autocracy_reform
# holy_synod_reform
# strengthened_the_patriarchy_reform
# head_of_the_patriarchy_reform
# tysyatsky_reform
# namestnik_reform
# oprichnina_reform
# anglican_state_church_reform
# english_conciliarism_reform
# direct_royal_administration_reform
# administration_of_the_parliament_reform
# royal_charters_reform
# commercial_trade_empire_reform
# peters_government_reform
# caliphate_reform
# caliphate_theocracy_reform
##########################################################
# When adding a new government reform then make sure that a unlock_$government_reform$_tt is defined in the localization
# For checking if a government reform is unlocked already, use has_unlocked_government_reform = { government_reform = $government_reform$ }
# For localization write the following: "Unlock the government reform §Y<Government Reform>§!."
unlock_government_reform = {
	custom_tooltip = unlock_$government_reform$_tt
	hidden_effect = {
		set_country_flag = unlocked_$government_reform$
	}
}

#Country effect
##########################################################
# Has the localization for the following estates:
# estate_brahmins
# estate_church
# estate_maratha
# estate_nobles
# estate_burghers
# estate_vaisyas
# estate_cossacks
# estate_nomadic_tribes
# estate_dhimmi
# estate_jains
# estate_rajput
# estate_janissaries
# estate_eunuchs
##########################################################
# When adding a new estate then make sure that a unlock_$estate$_tt is defined in the localization
# For checking if an Estate is unlocked already, use has_unlocked_estate = { estate = $estate$ }
# For localization write the following: "Unlock the §Y<Estate>§! Estate."
# Important: this way of unlocking an estate does not give you permanent access to the estate - hence the show_conditions.
# For granting permanent access, use "enable_estate_effect"
unlock_estate = {
	custom_tooltip = unlock_$estate$_tt
	hidden_effect = {
		set_country_flag = unlocked_$estate$
	}
	[[show_conditions]
		custom_tooltip = is_unavailable_$estate$
	]
}

#Country effect
##########################################################
# Has the localization for the following estates:
# estate_brahmins
# estate_church
# estate_maratha
# estate_nobles
# estate_burghers
# estate_vaisyas
# estate_cossacks
# estate_nomadic_tribes
# estate_dhimmi
# estate_jains
# estate_rajput
# estate_janissaries
# estate_eunuchs
##########################################################
# Unlocks the estate without any kind of condition
enable_estate_effect = {
	custom_tooltip = mechanic_enables_$estate$_yes
	hidden_effect = {
		clr_country_flag = disables_$estate$_flag
		set_country_flag = enables_$estate$_flag
	}
}

#Country effect
##########################################################
# Has the localization for the following estates:
# estate_brahmins
# estate_church
# estate_maratha
# estate_nobles
# estate_burghers
# estate_vaisyas
# estate_cossacks
# estate_nomadic_tribes
# estate_dhimmi
# estate_jains
# estate_rajput
# estate_janissaries
# estate_eunuchs
##########################################################
# Locks the estate even if they would 
disable_estate_effect = {
	custom_tooltip = mechanic_disables_$estate$_yes
	hidden_effect = {
		set_country_flag = disables_$estate$_flag
		clr_country_flag = enables_$estate$_flag
	}
}

enable_full_ducat_gain_from_selling_crownland = {
	custom_tooltip = enable_full_ducat_gain_from_selling_crownland_tt
	set_country_flag = enable_full_ducat_gain_from_selling_crownland_flag
}

can_sell_crownland_to_estates_targeted = {
	custom_tooltip = can_sell_crownland_to_estates_targeted_tt
	set_country_flag = can_sell_crownland_to_estates_targeted_flag
}

can_seize_crownland_to_estates_targeted = {
	custom_tooltip = can_seize_crownland_to_estates_targeted_tt
	set_country_flag = can_seize_crownland_to_estates_targeted_flag
}

#Country effect
#add_increase_same_religion_opinion = {
#	custom_tooltip = increase_same_religion_opinion_tt
#	hidden_effect = {
#		set_country_flag = has_increased_religios_opinion
#		every_known_country = {
#			limit = {
#				OR = {
#					ROOT = { has_harmonized_with = PREV }
#					religion = ROOT
#				}
#				NOT = {
#					has_opinion_modifier = {
#						who = ROOT
#						modifier = increased_same_religion
#					}
#				}
#			}
#			add_opinion = {
#				who = ROOT
#				modifier = increased_same_religion
#			}
#			reverse_add_opinion = {
#				who = ROOT
#				modifier = increased_same_religion
#			}
#		}
#	}
#}

#Country effect
#remove_increase_same_religion_opinion = {
#	custom_tooltip = remove_increase_same_religion_opinion_tt
#	hidden_effect = {
#		clr_country_flag = has_increased_religios_opinion
#		every_country = {
#			limit = {
#				has_opinion_modifier = {
#					who = ROOT
#					modifier = increased_same_religion
#				}
#			}
#			remove_opinion = {
#				who = ROOT
#				modifier = increased_same_religion
#			}
#			reverse_remove_opinion = {
#				who = ROOT
#				modifier = increased_same_religion
#			}
#		}
#	}
#}

#Country effect
add_increase_opinion_of_fetishists = {
	custom_tooltip = add_increase_opinion_of_fetishists_when_same_religion_tt
	hidden_effect = {
		set_country_flag = has_increased_fetishist_same_religion_opinion
		if = {
			limit = {
				religion = shamanism
			}
			every_known_country = {
				limit = {
					religion = shamanism
					NOT = {
						has_opinion_modifier = {
							who = ROOT
							modifier = increased_fetishist_opinion
						}
					}
				}
				add_opinion = {
					who = ROOT
					modifier = increased_fetishist_opinion
				}
				reverse_add_opinion = {
					who = ROOT
					modifier = increased_fetishist_opinion
				}
			}
		}
	}
}

#Country effect - make sure to add an own custom tooltip in form of: "Every §Y$religion$§! country will have their opinion of [Root.GetName] increased by §G+50§!."
add_opinion_of_religion = {
	hidden_effect = {
		set_country_flag = has_improve_opinion_flag
		set_country_flag = has_increased_$religion$_opinion
		every_known_country = {
			limit = {
				religion = $religion$
				NOT = {
					has_opinion_modifier = {
						who = ROOT
						modifier = increased_religion_opinion
					}
				}
			}
			add_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
			reverse_add_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
		}
	}
}

#Country effect - make sure to add a custom localization like: "Remove the opinion bonus of $religion$ countries for §Y[Root.GetName]§!."
remove_religious_opinion_for_scope = {
	hidden_effect = {
		clr_country_flag = has_improve_opinion_flag
		clr_country_flag = has_increased_$religion$_opinion
		every_country = {
			limit = {
				religion = $religion$
				has_opinion_modifier = {
					who = ROOT
					modifier = increased_religion_opinion
				}
			}
			remove_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
			reverse_remove_opinion = {
				who = ROOT
				modifier = increased_religion_opinion
			}
		}
	}
}

#Country effect
add_temporary_colonist = {
	add_country_modifier = {
		name = temporary_colonist
		duration = $duration$
	}
	custom_tooltip = add_temporary_colonist_tt
}

#Country effect - Mission reward
allow_baseline_invite_scholar = {
	custom_tooltip = allows_every_time_invite_of_$religious_school$
	hidden_effect = {
		set_country_flag = can_always_invite_$religious_school$
	}
	[[religious_school_modifier]
		tooltip = {
			add_country_modifier = {
				name = $religious_school_modifier$
				duration = -1
			}
		}
	]
}

#Country effect
#Make sure to make your own custom tooltip for it because parameters can't be given as input. Sadly.
transfer_treasury = {
	#custom_tooltip = transfer_treasury_tt	#Transfer §Y[$giver$.$variable$.GetValue]§! Ducats to $Y[$taker$.GetName]§!.
	hidden_effect = {
		$giver$ = {
			while = {
				limit = {
					check_variable = {
						which = $variable$
						value = 1
					}
				}
				$taker$ = {
					add_treasury = 1
				}
				add_treasury = -1
				subtract_variable = {
					which = $variable$
					value = 1
				}
			}
			multiply_variable = {
				which = $variable$
				value = 100
			}
			while = {
				limit = {
					check_variable = {
						which = $variable$
						value = 1
					}
				}
				$taker$ = {
					add_treasury = 0.01
				}
				add_treasury = -0.01
				subtract_variable = {
					which = $variable$
					value = 1
				}
			}
		}
	}
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
}

#Country effect
enable_propogate_religion_effect = {
	custom_tooltip = enable_propogate_religion_effect_tt
	hidden_effect = {
		set_country_flag = can_use_propagate_religion
	}
}

#Country effect
disable_propogate_religion_effect = {
	custom_tooltip = disable_propogate_religion_effect_tt
	hidden_effect = {
		clr_country_flag = can_use_propagate_religion
	}
}

#Country effect
enable_propogate_religion_immunity = {
	custom_tooltip = enable_propogate_religion_immunity_tt
	hidden_effect = {
		set_country_flag = immunity_against_propogate_religion
	}
}

#Country effect
disable_propogate_religion_immunity = {
	custom_tooltip = disable_propogate_religion_immunity_tt
	hidden_effect = {
		clr_country_flag = immunity_against_propogate_religion
	}
}

#Country effect
enable_propagate_religion_in_abrahamic_provinces= {
	custom_tooltip = enable_propogate_religion_in_abrahamic_provinces_tt
	hidden_effect = {
		set_country_flag = can_propagate_religion_in_abrahamic_provinces
	}
}

#Country effect
disable_propogate_religion_in_abrahamic_provinces = {
	custom_tooltip = disable_propogate_religion_in_abrahamic_provinces_tt
	hidden_effect = {
		clr_country_flag = can_propagate_religion_in_abrahamic_provinces
	}
}

#Country effect
set_prestige_to_zero = {
	custom_tooltip = set_prestige_to_zero_tt
	hidden_effect = {
		add_prestige = -200
		add_prestige = 100
	}
}

#Country effect
enable_cult_for_heirs = {
	custom_tooltip = enable_cult_for_heirs_tt
	hidden_effect = {
		set_country_flag = enabled_cult_for_heirs
		if = {
			limit = {
				has_heir = yes
			}
			country_event = {
				id = fetishist_flavor.600
			}
		}
	}
}

#Country effect
enable_cult_for_heirs_mission = {
	custom_tooltip = enable_cult_for_heirs_tt
	hidden_effect = {
		if = {
			limit = { has_estate_privilege = estate_church_heir_shrine }
			remove_estate_privilege = estate_church_heir_shrine
		}
		set_country_flag = enabled_cult_for_heirs
		set_country_flag = heir_cult_through_missions
		if = {
			limit = {
				has_heir = yes
			}
			country_event = {
				id = fetishist_flavor.600
			}
		}
	}
}

#Country effect
remove_heir_cult = {
	trigger_switch = {
		on_trigger = has_country_modifier
		junior_yemoja_cult =                   { remove_country_modifier = junior_yemoja_cult }
		junior_roog_cult =                     { remove_country_modifier = junior_roog_cult }
		junior_nyame_cult =                    { remove_country_modifier = junior_nyame_cult }
		junior_cwezi_cult =                    { remove_country_modifier = junior_cwezi_cult }
		junior_central_african_ancestor_cult = { remove_country_modifier = junior_central_african_ancestor_cult }
		junior_mwari_cult =                    { remove_country_modifier = junior_mwari_cult }
		junior_enkai_cult =                    { remove_country_modifier = junior_enkai_cult }
		junior_waaq_cult =                     { remove_country_modifier = junior_waaq_cult }
		junior_zanahary_cult =                 { remove_country_modifier = junior_zanahary_cult }
		junior_christianity_cult =             { remove_country_modifier = junior_christianity_cult }
		junior_islam_cult =                    { remove_country_modifier = junior_islam_cult }
		junior_buddhism_cult =                 { remove_country_modifier = junior_buddhism_cult }
		junior_dharmic_cult =                  { remove_country_modifier = junior_dharmic_cult }
		junior_south_central_american_cult =   { remove_country_modifier = junior_south_central_american_cult }
		junior_norse_cult =                    { remove_country_modifier = junior_norse_cult }
		junior_jewish_cult =                   { remove_country_modifier = junior_jewish_cult }
		junior_zoroastrian_cult =              { remove_country_modifier = junior_zoroastrian_cult }
	}
}

disable_cult_for_heirs = {
	custom_tooltip = disable_cult_for_heirs_tt
	hidden_effect = {
		remove_heir_cult = yes
		clr_country_flag = enabled_cult_for_heirs
	}
}

#Country effect
unlock_cult_through_selection = {
	custom_tooltip = unlock_cult_through_selection_tt
	hidden_effect = {
		country_event = {
			id = fetishist_flavor.601
		}
	}
}

#Country effect
half_estate_privilege_absolutism_loss = {
	custom_tooltip = half_estate_privilege_absolutism_loss_tt
	hidden_effect = {
		set_country_flag = has_halved_absolutism_reduction
	}
}

#Province effect
spawn_country_religious_rebels = {
	owner = {
		trigger_switch = {
			on_trigger = religion
			anglican =              { PREV = { spawn_rebels = { type = anglican_rebels size = $size$ } } }
			hussite =               { PREV = { spawn_rebels = { type = hussite_rebels size = $size$ } } }
			animism =               { PREV = { spawn_rebels = { type = animism_rebels size = $size$ } } }
			buddhism =              { PREV = { spawn_rebels = { type = buddhism_rebels size = $size$ } } }
			catholic =              { PREV = { spawn_rebels = { type = catholic_rebels size = $size$ } } }
			confucianism =          { PREV = { spawn_rebels = { type = confucianism_rebels size = $size$ } } }
			coptic =                { PREV = { spawn_rebels = { type = coptic_rebels size = $size$ } } }
			hinduism =              { PREV = { spawn_rebels = { type = hinduism_rebels size = $size$ } } }
			ibadi =                 { PREV = { spawn_rebels = { type = ibadi_rebels size = $size$ } } }
			inti =                  { PREV = { spawn_rebels = { type = inti_rebels size = $size$ } } }
			jewish =                { PREV = { spawn_rebels = { type = jewish_rebels size = $size$ } } }
			mahayana =              { PREV = { spawn_rebels = { type = mahayana_rebels size = $size$ } } }
			mesoamerican_religion = { PREV = { spawn_rebels = { type = maya_rebels size = $size$ } } }
			nahuatl =               { PREV = { spawn_rebels = { type = nahuatl_rebels size = $size$ } } }
			norse_pagan_reformed =  { PREV = { spawn_rebels = { type = norse_pagan_reformed_rebels size = $size$ } } }
			orthodox =              { PREV = { spawn_rebels = { type = orthodox_rebels size = $size$ } } }
			protestant =            { PREV = { spawn_rebels = { type = protestant_rebels size = $size$ } } }
			reformed =              { PREV = { spawn_rebels = { type = reformed_rebels size = $size$ } } }
			shamanism =             { PREV = { spawn_rebels = { type = shamanism_rebels size = $size$ } } }
			shiite =                { PREV = { spawn_rebels = { type = shiite_rebels size = $size$ } } }
			shinto =                { PREV = { spawn_rebels = { type = shinto_rebels size = $size$ } } }
			sikhism =               { PREV = { spawn_rebels = { type = sikhism_rebels size = $size$ } } }
			sunni =                 { PREV = { spawn_rebels = { type = sunni_rebels size = $size$ } } }
			tengri_pagan_reformed = { PREV = { spawn_rebels = { type = tengri_pagan_reformed_rebels size = $size$ } } }
			totemism =              { PREV = { spawn_rebels = { type = totemism_rebels size = $size$ } } }
			vajrayana =             { PREV = { spawn_rebels = { type = vajrayana_rebels size = $size$ } } }
			zoroastrian =           { PREV = { spawn_rebels = { type = zoroastrian_rebels size = $size$ } } }
			dreamtime =             { PREV = { spawn_rebels = { type = dreamtime_rebels size = $size$ } } }
		}
	}
}

#Province effect
spawn_province_religious_rebels = {
	trigger_switch = {
		on_trigger = religion
		anglican =              { spawn_rebels = { type = anglican_rebels size = $size$ } }
		hussite =               { spawn_rebels = { type = hussite_rebels size = $size$ } }
		animism =               { spawn_rebels = { type = animism_rebels size = $size$ } }
		buddhism =              { spawn_rebels = { type = buddhism_rebels size = $size$ } }
		catholic =              { spawn_rebels = { type = catholic_rebels size = $size$ } }
		confucianism =          { spawn_rebels = { type = confucianism_rebels size = $size$ } }
		coptic =                { spawn_rebels = { type = coptic_rebels size = $size$ } }
		hinduism =              { spawn_rebels = { type = hinduism_rebels size = $size$ } }
		ibadi =                 { spawn_rebels = { type = ibadi_rebels size = $size$ } }
		inti =                  { spawn_rebels = { type = inti_rebels size = $size$ } }
		jewish =                { spawn_rebels = { type = jewish_rebels size = $size$ } }
		mahayana =              { spawn_rebels = { type = mahayana_rebels size = $size$ } }
		mesoamerican_religion = { spawn_rebels = { type = maya_rebels size = $size$ } }
		nahuatl =               { spawn_rebels = { type = nahuatl_rebels size = $size$ } }
		norse_pagan_reformed =  { spawn_rebels = { type = norse_pagan_reformed_rebels size = $size$ } }
		orthodox =              { spawn_rebels = { type = orthodox_rebels size = $size$ } }
		protestant =            { spawn_rebels = { type = protestant_rebels size = $size$ } }
		reformed =              { spawn_rebels = { type = reformed_rebels size = $size$ } }
		shamanism =             { spawn_rebels = { type = shamanism_rebels size = $size$ } }
		shiite =                { spawn_rebels = { type = shiite_rebels size = $size$ } }
		shinto =                { spawn_rebels = { type = shinto_rebels size = $size$ } }
		sikhism =               { spawn_rebels = { type = sikhism_rebels size = $size$ } }
		sunni =                 { spawn_rebels = { type = sunni_rebels size = $size$ } }
		tengri_pagan_reformed = { spawn_rebels = { type = tengri_pagan_reformed_rebels size = $size$ } }
		totemism =              { spawn_rebels = { type = totemism_rebels size = $size$ } }
		vajrayana =             { spawn_rebels = { type = vajrayana_rebels size = $size$ } }
		zoroastrian =           { spawn_rebels = { type = zoroastrian_rebels size = $size$ } }
		dreamtime =             { spawn_rebels = { type = dreamtime_rebels size = $size$ } }
	}
}

#Country effect
disable_annexation_penalty = {
	custom_tooltip = disable_annexation_penalty_tt
	hidden_effect = {
		set_country_flag = no_integrate_penalty
		remove_country_modifier = annexers_legacy
	}
}

#Country effect
enable_annexation_penalty = {
	custom_tooltip = enable_annexation_penalty_tt
	hidden_effect = {
		clr_country_flag = no_integrate_penalty
	}
}

#Country effect
enable_cult_switching = {
	custom_tooltip = enable_cult_switching_tt
	hidden_effect = {
		set_country_flag = enabled_cult_switching
	}
}
enable_cult_switching_mission = {
	custom_tooltip = enable_cult_switching_tt
	hidden_effect = {
		set_country_flag = enabled_cult_switching_mission
	}
}

#Country effect
disable_cult_switching = {
	custom_tooltip = disable_cult_switching_tt
	hidden_effect = {
		clr_country_flag = enabled_cult_switching
	}
}

#Country effect
enable_development_on_buildings_built = {
	custom_tooltip = enable_development_on_buildings_built_tt
	hidden_effect = {
		set_country_flag = improve_development_on_buildings_built
	}
}

#Province effect - used for buildings
add_development_from_building = {
	if = {
		limit = {
			FROM = { has_country_flag = improve_development_on_buildings_built }
			NOT = { gained_development_from_building = { building = $building$ } }
		}
		add_base_$type$ = $value$
		hidden_effect = {
			set_province_flag = built_dev_$building$
		}
	}
}

#Province effect - used for buildings
add_development_from_upgrading_or_building = {
	if = {
		limit = {
			FROM = { has_country_flag = improve_development_on_buildings_built }
			NOT = { gained_development_from_building = { building = $building$ } }
		}
		if = {
			limit = { has_province_flag = built_dev_$obsolete_building$ }
			add_base_$type$ = $upgrade_value$
		}
		else = {
			add_base_$type$ = $value$
		}
		hidden_effect = {
			set_province_flag = built_dev_$building$
		}
	}
}

#Province effect - used for buildings
remove_development_from_building = {
	if = {
		limit = {
			FROM = { has_country_flag = improve_development_on_buildings_built }
			gained_development_from_building = { building = $building$ }
		}
		add_base_$type$ = -$value$
		if = {
			limit = {
				NOT = { base_$type$ = 1 }
			}
			set_base_$type$ = 1
		}
		hidden_effect = {
			clr_province_flag = built_dev_$building$
		}
	}
}

#Province effect - used for buildings
update_improved_military_buildings_modifier = {
	if = {
		limit = {
			owner = { has_government_attribute = improved_military_buildings }
		}
		tooltip = {
			add_province_modifier = {
				name = wei_suo_system_reform_$building$_modifier
				duration = -1
			}
		}
		hidden_effect = {
			remove_province_modifier = wei_suo_system_reform_barracks_modifier
			remove_province_modifier = wei_suo_system_reform_training_fields_modifier
			remove_province_modifier = wei_suo_system_reform_regimental_camp_modifier
			remove_province_modifier = wei_suo_system_reform_conscription_center_modifier
			remove_province_modifier = wei_suo_system_reform_soldier_households_modifier
			if = {
				limit = { has_building = barracks }
				add_province_modifier = {
					name = wei_suo_system_reform_barracks_modifier
					duration = -1
				}
			}
			if = {
				limit = { has_building = training_fields }
				add_province_modifier = {
					name = wei_suo_system_reform_training_fields_modifier
					duration = -1
				}
			}
			if = {
				limit = { has_building = regimental_camp }
				add_province_modifier = {
					name = wei_suo_system_reform_regimental_camp_modifier
					duration = -1
				}
			}
			if = {
				limit = { has_building = conscription_center }
				add_province_modifier = {
					name = wei_suo_system_reform_conscription_center_modifier
					duration = -1
				}
			}
			if = {
				limit = { has_building = soldier_households }
				add_province_modifier = {
					name = wei_suo_system_reform_soldier_households_modifier
					duration = -1
				}
			}
		}
	}
}

#Province effect
add_latest_building = {
	[[trade]
		if = {
			limit = { $builder$ = { dip_tech = 22 } }
			add_building = stock_exchange
		}
		else_if = {
			limit = { $builder$ = { dip_tech = 17 } }
			add_building = trade_depot
		}
		else = {
			add_building = marketplace
		}
	]
	[[government]
		if = {
			limit = { $builder$ = { adm_tech = 22 } }
			add_building = town_hall
		}
		else = {
			add_building = courthouse
		}
	]
	[[production]
		if = {
			limit = { $builder$ = { adm_tech = 24 } }
			add_building = counting_house
		}
		else = {
			add_building = workshop
		}
	]
	[[tax]
		if = {
			limit = { $builder$ = { adm_tech = 19 } }
			add_building = cathedral
		}
		else = {
			add_building = temple
		}
	]
	[[manpower]
		if = {
			limit = { $builder$ = { mil_tech = 16 } }
			add_building = training_fields
		}
		else = {
			add_building = barracks
		}
	]
	[[sailors]
		if = {
			limit = { $builder$ = { dip_tech = 19 } }
			add_building = drydock
		}
		else = {
			add_building = dock
		}
	]
	[[army_forcelimit]
		if = {
			limit = { $builder$ = { mil_tech = 22 } }
			add_building = conscription_center
		}
		else = {
			add_building = regimental_camp
		}
	]
	[[navy_forcelimit]
		if = {
			limit = { $builder$ = { dip_tech = 24 } }
			add_building = grand_shipyard
		}
		else = {
			add_building = shipyard
		}
	]
	[[coastal]
		if = {
			limit = { $builder$ = { dip_tech = 12 } }
			add_building = naval_battery
		}
		else = {
			add_building = coastal_defence
		}
	]
	[[fort]
		if = {
			limit = { $builder$ = { mil_tech = 24 } }
			add_building = fort_18th
		}
		else_if = {
			limit = { $builder$ = { mil_tech = 19 } }
			add_building = fort_17th
		}
		else_if = {
			limit = { $builder$ = { mil_tech = 14 } }
			add_building = fort_16th
		}
		else = {
			add_building = fort_15th
		}
	]
}

#Province effect
upgrade_building = {
	[[trade]
		if = {
			limit = { has_building = trade_depot }
			add_building = stock_exchange
		}
		else_if = {
			limit = { has_building = marketplace }
			add_building = trade_depot
		}
	]
	[[government]
		if = {
			limit = { has_building = courthouse }
			add_building = town_hall
		}
	]
	[[production]
		if = {
			limit = { has_building = workshop }
			add_building = counting_house
		}
	]
	[[tax]
		if = {
			limit = { has_building = temple }
			add_building = cathedral
		}
	]
	[[manpower]
		if = {
			limit = { has_building = barracks }
			add_building = training_fields
		}
	]
	[[sailors]
		if = {
			limit = { has_building = dock }
			add_building = drydock
		}
	]
	[[army_forcelimit]
		if = {
			limit = { has_building = regimental_camp }
			add_building = conscription_center
		}
	]
	[[navy_forcelimit]
		if = {
			limit = { has_building = shipyard }
			add_building = grand_shipyard
		}
	]
	[[coastal]
		if = {
			limit = { has_building = coastal_defence }
			add_building = naval_battery
		}
	]
	[[fort]
		if = {
			limit = { has_building = fort_17th }
			add_building = fort_18th
		}
		else_if = {
			limit = { has_building = fort_16th }
			add_building = fort_17th
		}
		else_if = {
			limit = { has_building = fort_15th }
			add_building = fort_16th
		}
	]
}

#Country effect - Make sure to make an own custom tooltip for it when using it "Gain §G$years$ years§! worth of Trade Income."
add_years_of_trade_income = {
	hidden_effect = {
		set_variable = {
			which = trade_years
			value = $years$
		}
		export_to_variable = {
			which = percentage_of_yearly_trade_income
			value = trigger_value:trade_income_percentage
		}
		export_to_variable = {
			which = yearly_trade_income
			value = trigger_value:monthly_income
		}
		multiply_variable = {
			which = yearly_trade_income
			which = percentage_of_yearly_trade_income
		}
		multiply_variable = {
			which = yearly_trade_income
			value = 12
		}
		while = {
			limit = {
				check_variable = {
					which = trade_years
					value = 1
				}
			}
			set_variable = {
				which = trade_income_added
				which = yearly_trade_income
			}
			while = {
				limit = {
					check_variable = {
						which = trade_income_added
						value = 1
					}
				}
				add_treasury = 1
				subtract_variable = {
					which = trade_income_added
					value = 1
				}
			}
			multiply_variable = {
				which = trade_income_added
				value = 100
			}
			while = {
				limit = {
					check_variable = {
						which = trade_income_added
						value = 1
					}
				}
				add_treasury = 0.01
				subtract_variable = {
					which = trade_income_added
					value = 1
				}
			}
			subtract_variable = {
				which = trade_years
				value = 1
			}
		}
	}
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
}

#Country effect
select_primary_cult = {
	change_cult = $cult$
	custom_tooltip = select_primary_cult_$cult$_tt
	custom_tooltip = tooltip_$cult$
	hidden_effect = {
		set_country_flag = has_$cult$_as_primary_cult
		add_country_modifier = {
			name = primary_$cult$
			duration = -1
		}
		if = {
			limit = { has_country_flag = enabled_cult_for_heirs }
			add_country_modifier = {
				name = junior_$cult$
				duration = -1
				desc = UNTIL_HEIR_SUCCESSION_OR_DEATH
			}
		}
	}
}

#Country effect
clear_previous_primary_cults = {
	hidden_effect = {
		trigger_switch = {
			on_trigger = has_country_flag
			has_yemoja_cult_as_primary_cult = {
				clr_country_flag = has_yemoja_cult_as_primary_cult
				remove_country_modifier = junior_yemoja_cult
				remove_country_modifier = primary_yemoja_cult
			}
			has_roog_cult_as_primary_cult = {
				clr_country_flag = has_roog_cult_as_primary_cult
				remove_country_modifier = junior_roog_cult
				remove_country_modifier = primary_roog_cult
			}
			has_nyame_cult_as_primary_cult = {
				clr_country_flag = has_nyame_cult_as_primary_cult
				remove_country_modifier = junior_nyame_cult
				remove_country_modifier = primary_nyame_cult
			}
			has_cwezi_cult_as_primary_cult = {
				clr_country_flag = has_cwezi_cult_as_primary_cult
				remove_country_modifier = junior_cwezi_cult
				remove_country_modifier = primary_cwezi_cult
			}
			has_central_african_ancestor_cult_as_primary_cult = {
				clr_country_flag = has_central_african_ancestor_cult_as_primary_cult
				remove_country_modifier = junior_central_african_ancestor_cult
				remove_country_modifier = primary_central_african_ancestor_cult
			}
			has_mwari_cult_as_primary_cult = {
				clr_country_flag = has_mwari_cult_as_primary_cult
				remove_country_modifier = junior_mwari_cult
				remove_country_modifier = primary_mwari_cult
			}
			has_enkai_cult_as_primary_cult = {
				clr_country_flag = has_enkai_cult_as_primary_cult
				remove_country_modifier = junior_enkai_cult
				remove_country_modifier = primary_enkai_cult
			}
			has_waaq_cult_as_primary_cult = {
				clr_country_flag = has_waaq_cult_as_primary_cult
				remove_country_modifier = junior_waaq_cult
				remove_country_modifier = primary_waaq_cult
			}
			has_zanahary_cult_as_primary_cult = {
				clr_country_flag = has_zanahary_cult_as_primary_cult
				remove_country_modifier = junior_zanahary_cult
				remove_country_modifier = primary_zanahary_cult
			}
			has_christianity_cult_as_primary_cult = {
				clr_country_flag = has_christianity_cult_as_primary_cult
				remove_country_modifier = junior_christianity_cult
				remove_country_modifier = primary_christianity_cult
			}
			has_islam_cult_as_primary_cult = {
				clr_country_flag = has_islam_cult_as_primary_cult
				remove_country_modifier = junior_islam_cult
				remove_country_modifier = primary_islam_cult
			}
			has_buddhism_cult_as_primary_cult = {
				clr_country_flag = has_buddhism_cult_as_primary_cult
				remove_country_modifier = junior_buddhism_cult
				remove_country_modifier = primary_buddhism_cult
			}
			has_dharmic_cult_as_primary_cult = {
				clr_country_flag = has_dharmic_cult_as_primary_cult
				remove_country_modifier = junior_dharmic_cult
				remove_country_modifier = primary_dharmic_cult
			}
			has_south_central_american_cult_as_primary_cult = {
				clr_country_flag = has_south_central_american_cult_as_primary_cult
				remove_country_modifier = junior_south_central_american_cult
				remove_country_modifier = primary_south_central_american_cult
			}
			has_norse_cult_as_primary_cult = {
				clr_country_flag = has_norse_cult_as_primary_cult
				remove_country_modifier = junior_norse_cult
				remove_country_modifier = primary_norse_cult
			}
			has_jewish_cult_as_primary_cult = {
				clr_country_flag = has_jewish_cult_as_primary_cult
				remove_country_modifier = junior_jewish_cult
				remove_country_modifier = primary_jewish_cult
			}
			has_zoroastrian_cult_as_primary_cult = {
				clr_country_flag = has_zoroastrian_cult_as_primary_cult
				remove_country_modifier = junior_zoroastrian_cult
				remove_country_modifier = primary_zoroastrian_cult
			}
		}
	}
}

#Country effect - Triggers on monarch death - deprecated
clear_primary_cult_bonus = {
	hidden_effect = {
		trigger_switch = {
			on_trigger = has_country_modifier
			primary_yemoja_cult = {
				remove_country_modifier = primary_yemoja_cult
			}
			primary_roog_cult = {
				remove_country_modifier = primary_roog_cult
			}
			primary_nyame_cult = {
				remove_country_modifier = primary_nyame_cult
			}
			primary_cwezi_cult = {
				remove_country_modifier = primary_cwezi_cult
			}
			primary_central_african_ancestor_cult = {
				remove_country_modifier = primary_central_african_ancestor_cult
			}
			primary_mwari_cult = {
				remove_country_modifier = primary_mwari_cult
			}
			primary_enkai_cult = {
				remove_country_modifier = primary_enkai_cult
			}
			primary_waaq_cult = {
				remove_country_modifier = primary_waaq_cult
			}
			primary_zanahary_cult = {
				remove_country_modifier = primary_zanahary_cult
			}
			primary_christianity_cult = {
				remove_country_modifier = primary_christianity_cult
			}
			primary_islam_cult = {
				remove_country_modifier = primary_islam_cult
			}
			primary_buddhism_cult = {
				remove_country_modifier = primary_buddhism_cult
			}
			primary_dharmic_cult = {
				remove_country_modifier = primary_dharmic_cult
			}
			primary_south_central_american_cult = {
				remove_country_modifier = primary_south_central_american_cult
			}
			primary_norse_cult = {
				remove_country_modifier = primary_norse_cult
			}
			primary_jewish_cult = {
				remove_country_modifier = primary_jewish_cult
			}
			primary_zoroastrian_cult = {
				remove_country_modifier = primary_zoroastrian_cult
			}
		}
	}
}

#Country effect
enable_primary_cult = {
	custom_tooltip = enable_primary_cult_tt
	hidden_effect = {
		set_country_flag = uses_primary_cult
		country_event = {
			id = fetishist_flavor.602
		}
	}
}

#Country effect
disable_primary_cult = {
	custom_tooltip = disable_primary_cult_tt
	hidden_effect = {
		clr_country_flag = uses_primary_cult
		clr_country_flag = has_selected_a_primary_cult
		clear_previous_primary_cults = yes
	}
}

#Country effect
disable_scholar_cost = {
	custom_tooltip = disable_scholar_cost_tt
	hidden_effect = {
		set_country_flag = no_scholar_adm_cost
	}
}

#Country effect
enable_scholar_cost = {
	custom_tooltip = enable_scholar_cost_tt
	hidden_effect = {
		clr_country_flag = no_scholar_adm_cost
	}
}

#Country effect - Estate
enable_baseline_invite_scholar = {
	custom_tooltip = enable_baseline_invite_scholar_tt
	hidden_effect = {
		country_event = {
			id = muslim_school_events.24
		}
		set_country_flag = enabled_baseline_invite_scholar
	}
}

enable_baseline_invite_scholar_no_privilege = {
	custom_tooltip = enable_baseline_invite_scholar_tt
	hidden_effect = {
		country_event = {
			id = muslim_school_events.24
		}
		set_country_flag = enabled_baseline_invite_scholar_no_priv
	}
}

allow_baseline_invite_scholar_privilege = {
	custom_tooltip = allows_every_time_invite_of_$religious_school$
	hidden_effect = {
		set_country_flag = privilege_can_always_invite_$religious_school$
	}
	custom_tooltip = allow_baseline_invite_scholar_privilege_tt
	custom_tooltip = $religious_school$_bonus_tt
}

disallow_baseline_invite_scholar = {
	hidden_effect = {
		clr_country_flag = privilege_can_always_invite_hanafi_school
		clr_country_flag = privilege_can_always_invite_hanbali_school
		clr_country_flag = privilege_can_always_invite_maliki_school
		clr_country_flag = privilege_can_always_invite_shafii_school
		clr_country_flag = privilege_can_always_invite_ismaili_school
		clr_country_flag = privilege_can_always_invite_jafari_school
		clr_country_flag = privilege_can_always_invite_zaidi_school
	}
}

disable_baseline_invite_scholar = {
	custom_tooltip = disable_baseline_invite_scholar_tt
	hidden_effect = {
		clr_country_flag = enabled_baseline_invite_scholar
		if = {
			limit = { NOT = { has_country_flag = enabled_baseline_invite_scholar_no_priv } }
			clr_country_flag = privilege_can_always_invite_hanafi_school
			clr_country_flag = privilege_can_always_invite_hanbali_school
			clr_country_flag = privilege_can_always_invite_maliki_school
			clr_country_flag = privilege_can_always_invite_shafii_school
			clr_country_flag = privilege_can_always_invite_ismaili_school
			clr_country_flag = privilege_can_always_invite_jafari_school
			clr_country_flag = privilege_can_always_invite_zaidi_school
		}
	}
}

#Country effect
enable_capital_slave_raid = {
	custom_tooltip = enable_capital_slave_raid_tt
	hidden_effect = {
		set_country_flag = enabled_capital_slave_raid
	}
	if = {
		limit = { has_dlc = "Leviathan" }
		custom_tooltip = enable_slave_raid_pillage_tt
	}
}

disable_capital_slave_raid = {
	custom_tooltip = disable_capital_slave_raid_tt
	hidden_effect = {
		clr_country_flag = enabled_capital_slave_raid
	}
	if = {
		limit = { has_dlc = "Leviathan" }
		custom_tooltip = disable_slave_raid_pillage_tt
	}
}

#On action effect
grant_manpower_from_besieging_fort = {
	if = {
		limit = {
			ROOT = {
				OR = {
					has_government_attribute = manpower_from_capturing_forts
					has_country_flag = enabled_capital_slave_raid
				}
			}
			FROM = {
				owner = {
					war_with = ROOT
				}
				NOT = { has_province_modifier = estate_nobles_neighbor_raids_fort }
			}
		}
		FROM = {
			add_province_modifier = {
				name = estate_nobles_neighbor_raids_fort
				duration = 1825
			}
		}
		if = {
			limit = { FROM = { fort_level = 1 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 2 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 3 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 4 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 5 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 6 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 7 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 8 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 9 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
		if = {
			limit = { FROM = { fort_level = 10 } }
			ROOT = { add_yearly_manpower = 0.1 }
		}
	}
}

slave_raid_pillage_capital_effect = {
	ROOT = {
		if = {
			limit = {
				has_country_flag = enabled_capital_slave_raid
			}
			add_yearly_manpower = 1
			random_owned_province = {
				limit = { trade_goods = slaves }
				add_base_production = 1
			}
		}
	}
}

#Country effect
enable_tributary_state_use = {
	if = {
		limit = {
			OR = {
				has_dlc = "Mandate of Heaven"
				has_dlc = "Origins"
			}
		}
		custom_tooltip = enable_tributary_state_use_tt
	}
	hidden_effect = {
		set_country_flag = can_create_tributaries_flag
	}
}

disable_tributary_state_use = {
	if = {
		limit = {
			OR = {
				has_dlc = "Mandate of Heaven"
				has_dlc = "Origins"
			}
		}
		custom_tooltip = disable_tributary_state_use_tt
	}
	hidden_effect = {
		clr_country_flag = can_create_tributaries_flag
	}
}

#Use for estate effects
enable_tributary_state_use_estate = {
	if = {
		limit = {
			OR = {
				has_dlc = "Mandate of Heaven"
				has_dlc = "Origins"
			}
		}
		custom_tooltip = enable_tributary_state_use_tt
	}
	hidden_effect = {
		set_country_flag = can_create_tributaries_flag_estate
	}
}

disable_tributary_state_use_estate = {
	if = {
		limit = {
			OR = {
				has_dlc = "Mandate of Heaven"
				has_dlc = "Origins"
			}
		}
		custom_tooltip = disable_tributary_state_use_tt
	}
	hidden_effect = {
		clr_country_flag = can_create_tributaries_flag_estate
	}
	every_subject_country = {
		limit = {
			is_subject_of_type = tributary_state
		}
		grant_independence = yes
	}
}

#Country effect, event target
select_biggest_country_of_region = {
	if = {
		limit = { any_country = { capital_scope = { region = $region$ } } }
		if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 1000 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 1000 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 900 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 900 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 800 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 800 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 700 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 700 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 600 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 600 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 500 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 500 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 400 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 400 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 300 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 300 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 200 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 200 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } total_development = 100 } }
			random_country = {
				limit = { capital_scope = { region = $region$ } total_development = 100 }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		else_if = {
			limit = { any_country = { capital_scope = { region = $region$ } } }
			random_country = { 
				limit = { capital_scope = { region = $region$ } }
				save_event_target_as = selected_biggest_country_of_region
			}
		}
		set_country_flag = mal_visit_foreign_capital
	}
}

select_biggest_country_of_scope_type = {
	if = {
		limit = { 
			$trigger_scope$ = {
				$limit$ 
			} 
		}
		if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 1000
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 1000 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 900
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 900 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 800
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 800 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 700
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 700 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 600
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 600 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 500
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 500 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 400
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 400 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 300
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 300 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 200
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 200 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else_if = {
			limit = { 
				$trigger_scope$ = { 
					$limit$
					total_development = 100
				}
			}
			$effect_scope$ = {
				limit = { 
					$limit$
					total_development = 100 
				}
				save_event_target_as = selected_biggest_country
			}
		}
		else = {
			$effect_scope$ = {
				limit = { 
					$limit$
				}
				save_event_target_as = selected_biggest_country
			}
		}
	}
}

#Country effect
mal_mansa_musa_visit_effect = {
	trigger_switch = {
		on_trigger = has_country_flag
		mal_journey_to_maghreb = { 			every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = maghreb_region } }		add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_iberia = { 			every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = iberia_region } }			add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_france = { 			every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = france_region } }			add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_italy = { 			every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = italy_region } }			add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_south_germany = { 	every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = south_german_region } }	add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_balkans = { 			every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = balkan_region } }			add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_anatolia = { 		every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = anatolia_region } }		add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_mashriq = { 			every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = mashriq_region } }		add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_egypt = { 			every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = egypt_region } }			add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_arabia = { 			every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = arabia_region } }			add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
		mal_journey_to_horn_of_africa = { 	every_country = { limit = { NOT = { tag = ROOT } NOT = { has_country_flag = mal_is_already_getting_visit } capital_scope = { region = horn_of_africa_region } }	add_country_modifier = { name = mal_the_gold_inflation duration = 1825 } } }
	}
}

#Country effect
mal_invest_in_own_provinces_effect = {
	trigger_switch = {
		on_trigger = has_country_flag
		mal_journey_to_maghreb = { 			custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = maghreb_region } }		add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_iberia = { 			custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = iberia_region } }			add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_france = { 			custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = france_region } }			add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_italy = { 			custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = italy_region } }			add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_south_germany = { 	custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = south_german_region } }	add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_balkans = { 			custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = balkan_region } }			add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_anatolia = { 		custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = anatolia_region } }		add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_mashriq = { 			custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = mashriq_region } }		add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_egypt = { 			custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = egypt_region } }			add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_arabia = { 			custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = arabia_region } }			add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
		mal_journey_to_horn_of_africa = { 	custom_tooltip = mal_invest_in_region_tt	hidden_effect = { every_owned_province = { limit = { region = horn_of_africa_region } }	add_province_modifier = { name = mal_investing_in_own_provinces duration = 1825 }} }
	}
}

#Country effect
mal_travel_to_next_area = {
	if = {
		limit = { has_country_flag = mal_journey_to_maghreb }
		clr_country_flag = mal_journey_to_maghreb
		set_country_flag = mal_journey_to_iberia
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_iberia }
		clr_country_flag = mal_journey_to_iberia
		set_country_flag = mal_journey_to_france
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_france }
		clr_country_flag = mal_journey_to_france
		set_country_flag = mal_journey_to_italy
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_italy }
		clr_country_flag = mal_journey_to_italy
		set_country_flag = mal_journey_to_south_germany
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_south_germany }
		clr_country_flag = mal_journey_to_south_germany
		set_country_flag = mal_journey_to_balkans
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_balkans }
		clr_country_flag = mal_journey_to_balkans
		set_country_flag = mal_journey_to_anatolia
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_anatolia }
		clr_country_flag = mal_journey_to_anatolia
		set_country_flag = mal_journey_to_mashriq
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_mashriq }
		clr_country_flag = mal_journey_to_mashriq
		set_country_flag = mal_journey_to_egypt
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_egypt }
		clr_country_flag = mal_journey_to_egypt
		set_country_flag = mal_journey_to_arabia
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_arabia }
		clr_country_flag = mal_journey_to_arabia
		set_country_flag = mal_journey_to_horn_of_africa
	}
	else_if = {
		limit = { has_country_flag = mal_journey_to_horn_of_africa }
		clr_country_flag = mal_journey_to_horn_of_africa
		set_country_flag = mal_journey_to_home
	}
	clr_country_flag = mal_has_just_arrived
	clr_country_flag = mal_visit_foreign_capital
}

#Country effect
mal_select_country_for_region = {
	trigger_switch = {
		on_trigger = has_country_flag
		mal_journey_to_maghreb = { 			maghreb_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = maghreb_region } }
		mal_journey_to_iberia = { 			iberia_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = iberia_region } }
		mal_journey_to_france = { 			france_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = france_region } }
		mal_journey_to_italy = { 			italy_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = italy_region } }
		mal_journey_to_south_germany = { 	south_german_region = {		discover_country = ROOT } select_biggest_country_of_region = { region = south_german_region } }
		mal_journey_to_balkans = { 			balkan_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = balkan_region } }
		mal_journey_to_anatolia = { 		anatolia_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = anatolia_region } }
		mal_journey_to_mashriq = { 			mashriq_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = mashriq_region } }
		mal_journey_to_egypt = { 			egypt_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = egypt_region } }
		mal_journey_to_arabia = { 			arabia_region = {			discover_country = ROOT } select_biggest_country_of_region = { region = arabia_region } }
		mal_journey_to_horn_of_africa = { 	horn_of_africa_region = {	discover_country = ROOT } select_biggest_country_of_region = { region = horn_of_africa_region } }
	}
}

clr_protestant_aspects_buffs = {
	if = {
		limit = { NOT = { has_church_aspect = organised_through_bishops_aspect } }
		remove_country_modifier = organised_through_bishops_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = priests_may_marry_aspect } }
		remove_country_modifier = priests_may_marry_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = adult_baptism_aspect } }
		remove_country_modifier = adult_baptism_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = holy_sacraments_aspect } }
		remove_country_modifier = holy_sacraments_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = saints_accept_prayers_aspect } }
		remove_country_modifier = saints_accept_prayers_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = icons_images_aspect } }
		remove_country_modifier = icons_images_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = legalised_divorces_aspect } }
		remove_country_modifier = legalised_divorces_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = heretics_deported_aspect } }
		remove_country_modifier = heretics_deported_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = parish_registers_aspect } }
		remove_country_modifier = parish_registers_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = individual_creeds_aspect } }
		remove_country_modifier = individual_creeds_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = allow_usury_aspect } }
		remove_country_modifier = allow_usury_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = translated_bibles_aspect } }
		remove_country_modifier = translated_bibles_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = justified_religious_war_aspect } }
		remove_country_modifier = justified_religious_war_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = war_preaches_aspect } }
		remove_country_modifier = war_preaches_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = head_of_the_church_aspect } }
		remove_country_modifier = head_of_the_church_aspect_modifier
	}
	if = {
		limit = { NOT = { has_church_aspect = anglican_aspect } }
		remove_country_modifier = anglican_aspect_aspect_modifier
	}
}

#Credits for that script goes to Stiopa
for = {
	[[custom_tooltip]custom_tooltip = $custom_tooltip$]
	hidden_effect = {
		set_variable = {
			which = ForLoopCounter
			value = $amount$
		}	
		while = {
			limit = {
				check_variable = {
					which = ForLoopCounter
					value = 1
				}
			}
			$effect$
			subtract_variable = {
				which = ForLoopCounter
				value = 1
			}
		}
	}
}

change_ruler_stat = {
    tooltip = {
        change_$stat$ = $amount$
    }
    custom_tooltip = ADD_STAT_OR_POWER_$stat$
    hidden_effect = {
		set_variable = {
			which = ForLoopCounter
			value = $amount$
		}
		while = {
			limit = {
				check_variable = {
					which = ForLoopCounter
					value = 1
				}
			}
			if = {
				limit = {
					NOT = { $stat$ = 6 }
				}
				change_$stat$ = 1
			}
			else = {
				add_$stat$_power = 100
			}
			subtract_variable = {
				which = ForLoopCounter
				value = 1
			}
		}
    }
}

change_heir_stat = {
    tooltip = {
        change_heir_$stat$ = $amount$
    }
    custom_tooltip = ADD_STAT_OR_POWER_$stat$
    hidden_effect = {
		set_variable = {
			which = ForLoopCounter
			value = $amount$
		}
		while = {
			limit = {
				check_variable = {
					which = ForLoopCounter
					value = 1
				}
			}
			if = {
				limit = {
					NOT = { heir_$stat$ = 6 }
				}
				change_heir_$stat$ = 1
			}
			else = {
				add_$stat$_power = 100
			}
			subtract_variable = {
				which = ForLoopCounter
				value = 1
			}
		}
    }
}

for_variable_amount = {
    set_variable = {
        which = ForLoopCounter
        which = $variable$
    }

    while = {
        limit = {
            check_variable = {
                which = ForLoopCounter
                value = 1
            }
        }
        $effect$
        subtract_variable = {
            which = ForLoopCounter
            value = 1
        }
    }
}


##########################################################
# Supports following types of units
# artillery
# cavalry
# infantry
# mercenary_infantry
# mercenary_cavalry
# heavy_ship
# light_ship
# galley
# transport
# <unit name> 
##########################################################
#Country effect
# For tooltip use the following scheme: "§Y<amount>§! of §Y<unit_type>§! will be created in §Y[<province>.GetName]§! for §Y[This.GetName]§!."
create_units_of_type = {
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
	hidden_effect = {
		for = {
			amount = $amount$
			effect = "
				$province$ = { $unit_type$ = PREV }
			"
		}
	}
}

#Province effect
# For tooltip use the following scheme: "§Y<amount>§! of §Y<unit_type>§! will be created in §Y[This.GetName]§! for §Y[<who>.GetName]§!."
create_units_of_type_in_province = {
	[[custom_tooltip]
		custom_tooltip = $custom_tooltip$
	]
	hidden_effect = {
		$who$ = {
			for = {
				amount = $amount$
				effect = "
					PREV = { $unit_type$ = $who$ }
				"
			}
		}
	}
}

#Country effect
##########################################################
# Supports following factions (aka. has tooltips for them)
# temples
# enuchs
# bureaucrats
# mr_aristocrats
# mr_traders
# mr_guilds
# rr_jacobins
# rr_royalists
# rr_girondists
# pr_buccaneers
# pr_smugglers
# pr_captains
##########################################################
faction_in_power_effect = {
	if = {
		limit = { has_faction = $faction$ }
		if = {
			limit = { faction_in_power = $faction$ }
			custom_tooltip = $faction$_are_currently_in_power_tt
			$effect$
		}
		else = {
			custom_tooltip = $faction$_in_power_tt
			tooltip = {
				$effect$
			}
		}
	}
}

## adds the culture as an accepted culture or 100 dip power
### add_accepted_culture_or_dip_power = { culture = <culture> }
### the custom effect is only able to check for up to 10 culture slots
#Credits for that script goes to Stiopa
add_accepted_culture_or_dip_power = {
	tooltip = {
		add_accepted_culture = $culture$
	}
	custom_tooltip = ADD_ACCEPTED_CULTURE_TT # "If the §YCulture§! is already an §YAccepted Culture§!, or if there are not enough §YSlots§!, gain §G100§! Diplomatic Power instead."
	hidden_effect = {
		if = {
			limit = {
				accepted_culture = $culture$
			}
			add_dip_power = 100
		}
		else_if = {
			limit = {
				primary_culture = $culture$
			}
			add_dip_power = 100
		}
		else_if = {
			limit = {
				num_accepted_cultures = 10
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 11
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 9
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 10
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 8
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 9
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 7
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 8
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 6
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 7
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 5
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 6
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 4
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 5
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 3
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 4
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 2
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 3
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				num_accepted_cultures = 1
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 2
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else_if = {
			limit = {
				NOT = { num_accepted_cultures = 1 }
			}
			if = {
				limit = {
					has_global_modifier_value = {
						which = num_accepted_cultures
						value = 1
					}
				}
				add_accepted_culture = $culture$
			}
			else = {
				add_dip_power = 100
			}
		}
		else = {
			add_dip_power = 100
		}
	}
}

#Use this scripted in the on_actions file, on_battle_won_country
count_won_battles_and_reward_at_end = {
	if = {
		limit = {
			ROOT = {
				has_country_flag = $counting_flag$	#Using country flags because we don't want a country to stack a variable out of control and cause performance issue because of large variables.
			}
		}
		ROOT = {
			change_variable = {
				which = num_won_battles
				value = 1
			}
		}
	}
	if = {
		limit = {
			ROOT = {
				has_country_flag = $counting_flag$
				check_variable = {
					which = num_won_battles
					value = $max_value$
				}
			}
		}
		ROOT = {
			clr_country_flag = $counting_flag$
            $effect$
		}
	}
}

fifty_percent_merc_army_professionalism_cost = {
	custom_tooltip = fifty_percent_merc_army_professionalism_cost_tt
	hidden_effect = {
		set_country_flag = fifty_percent_merc_army_professionalism_cost
	}
}

#Province effect
set_center_level_3_center_of_trade = {
	if = {
		limit = { NOT = { province_has_center_of_trade_of_level = 1 } }
		center_of_trade = 3
	}
	else = {
		if = {
			limit = { province_has_center_of_trade_of_level = 3 }
			add_base_production = 4
		}
		else_if = {
			limit = { province_has_center_of_trade_of_level = 2 }
			add_base_production = 2
			add_center_of_trade_level = 1
		}
		else = {
			add_center_of_trade_level = 2
		}
	}
}


set_center_level_2_center_of_trade = {
	if = {
		limit = { NOT = { province_has_center_of_trade_of_level = 1 } }
		center_of_trade = 2
	}
	else = {
		if = {
			limit = { province_has_center_of_trade_of_level = 2 }
			add_base_production = 2
		}
		else = {
			add_center_of_trade_level = 1
		}
	}
}

enable_admirals_army_professionalism = {
	if = {
		limit = { has_dlc = "Cradle of Civilization" }
		custom_tooltip = admirals_give_army_professionalism_tt
	}
	hidden_effect = {
		set_country_flag = admirals_give_army_professionalism
	}
}

make_ruler_to_legendary_pirate = {
	if = {
		limit = {
			has_dlc = "Rights of Man"
			NOT = { num_of_ruler_traits = { amount = 3 } }
		}
		add_ruler_personality = legendary_pirate_personality
		custom_tooltip = legendary_pirate_personality_at
	}
	else = {
		custom_tooltip = legendary_pirate_personality_bt
	}
	set_ruler_flag = historical_pirate
	random_list = {
		1 = { trigger = { NOT = { ADM = 6 } } change_adm = 1 }
		1 = { trigger = { NOT = { DIP = 6 } } change_dip = 1 }
		1 = { trigger = { NOT = { MIL = 6 } } change_mil = 1 }
	}
}

add_influence_to_random_faction = {
	random_list = {
		1 = {
			trigger = {
				has_faction = rr_girondists
			}
			add_faction_influence = {
				faction = rr_girondists
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = rr_jacobins
			}
			add_faction_influence = {
				faction = rr_jacobins
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = rr_royalists
			}
			add_faction_influence = {
				faction = rr_royalists
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = pr_buccaneers
			}
			add_faction_influence = {
				faction = pr_buccaneers
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = pr_captains
			}
			add_faction_influence = {
				faction = pr_captains
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = pr_smugglers
			}
			add_faction_influence = {
				faction = pr_smugglers
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = mr_aristocrats
			}
			add_faction_influence = {
				faction = mr_aristocrats
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = mr_guilds
			}
			add_faction_influence = {
				faction = mr_guilds
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = mr_traders
			}
			add_faction_influence = {
				faction = mr_traders
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = enuchs
			}
			add_faction_influence = {
				faction = enuchs
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = bureaucrats
			}
			add_faction_influence = {
				faction = bureaucrats
				influence = $influence$
			}
		}
		1 = {
			trigger = {
				has_faction = temples
			}
			add_faction_influence = {
				faction = temples
				influence = $influence$
			}
		}
	}
}

add_influence_to_adm_faction = {
	if = {
		limit = { 
			has_faction = mr_guilds 
		}
		add_faction_influence = {
			faction = mr_guilds
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = pr_buccaneers 
		}
		add_faction_influence = {
			faction = pr_buccaneers
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = rr_jacobins 
		}
		add_faction_influence = {
			faction = rr_jacobins
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = bureaucrats
		}
		add_faction_influence = {
			faction = bureaucrats
			influence = $influence$
		}				
	}
}

add_influence_to_dip_faction = {
	if = {
		limit = { 
			has_faction = mr_traders 
		}
		add_faction_influence = {
			faction = mr_traders
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = pr_smugglers 
		}
		add_faction_influence = {
			faction = pr_smugglers
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = rr_royalists 
		}
		add_faction_influence = {
			faction = rr_royalists
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = enuchs
		}
		add_faction_influence = {
			faction = enuchs
			influence = $influence$
		}				
	}
}

add_influence_to_mil_faction = {
	if = {
		limit = { 
			has_faction = mr_aristocrats 
		}
		add_faction_influence = {
			faction = mr_aristocrats
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = pr_captains 
		}
		add_faction_influence = {
			faction = pr_captains
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = rr_girondists 
		}
		add_faction_influence = {
			faction = rr_girondists
			influence = $influence$
		}				
	}
	if = {
		limit = { 
			has_faction = temples
		}
		add_faction_influence = {
			faction = temples
			influence = $influence$
		}				
	}
}

show_points_needed_for_livionian_government_of_category = {
	[[adm]
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 5 } } }
			custom_tooltip = livonian_administrative_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 4 } } }
			custom_tooltip = livonian_absolute_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 3 } } }
			custom_tooltip = livonian_trade_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 3 } } }
			custom_tooltip = livonian_constitutional_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 3 } } }
			custom_tooltip = livonian_theocratic_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_adm value = 2 } } }
			custom_tooltip = livonian_enlightened_monarchy_points_needed_tt
		}
	]
	[[dip]
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 5 } } }
			custom_tooltip = livonian_naval_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 4 } } }
			custom_tooltip = livonian_diplomatic_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 4 } } }
			custom_tooltip = livonian_admiral_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 3 } } }
			custom_tooltip = livonian_trade_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 3 } } }
			custom_tooltip = livonian_elective_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 3 } } }
			custom_tooltip = livonian_naval_controlled_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_dip value = 2 } } }
			custom_tooltip = livonian_enlightened_monarchy_points_needed_tt
		}
	]
	[[mil]
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 5 } } }
			custom_tooltip = livonian_military_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 4 } } }
			custom_tooltip = livonian_general_controlled_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 3 } } }
			custom_tooltip = livonian_theocratic_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 3 } } }
			custom_tooltip = livonian_mercenary_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 3 } } }
			custom_tooltip = livonian_naval_controlled_monarchy_points_needed_tt
		}
		if = {
			limit = { NOT = { check_variable = { which = liv_mil value = 2 } } }
			custom_tooltip = livonian_enlightened_monarchy_points_needed_tt
		}
	]
}

add_revolutionary_zeal_or_absolutism = {
	if = {
		limit = {
			has_dlc = "Emperor"
			is_revolutionary = yes
		}
		add_revolutionary_zeal = $amount$
	}
	else = {
		add_absolutism = $amount$
	}
}

#Cut because the Grand Crusade war doesn't really have any place in the current content, but it could be very useful for the future.
#Also modders should have the chance to just uncomment it all so they can experience the great 30 Years War like Crusade.
#enable_grand_crusade = {
#	custom_tooltip = enable_grand_crusade_tt
#	set_country_flag = can_declare_grand_crusade_wars
#	hidden_effect = {
#		save_global_event_target_as = grand_crusader_war_monger
#		set_global_flag = grand_crusades_enabled
#		set_country_flag = grand_crusader_war_monger_flag
#	}
#}
#enable_grand_crusade_tt: "Enables the §YGrand Crusade§! casus belli against all §YHeathen§! nations which have at least §Y300§! total development.\nThis casus belli enables a decision for every independent §YCatholic§! nation to join the Grand Crusade.\n\nTo join the Grand Crusade the Catholic nation must fulfil the following conditions:\nHas at least §Y100§! opinion of us or vice versa\nIs NOT allied with the §YGrand Crusade Target§! target\nHas NOT a truce with the §YGrand Crusade Target§!\nIs not at war\nDid NOT complete the §YHumanist§! idea group\n\n§RNations of the religion group of the §YGrand Crusade Target§! can join the defender's side.§!"

add_humiliation_reward = {
	if = {
		limit = { has_dlc = "Mandate of Heaven" }
		custom_tooltip = add_humiliation_reward_tt
	}
	add_power_projection = {
		type = humiliation_of_a_rival
		amount = 30
	}
	hidden_effect = {
		set_country_flag = humiliated_rival
	}
}

set_likely_rebels_flag = {
	hidden_effect = {
		if = { limit = { likely_rebels = anglican_rebels } 					set_province_flag = likely_spawns_anglican_rebels }
		if = { limit = { likely_rebels = animism_rebels } 					set_province_flag = likely_spawns_animism_rebels }
		if = { limit = { likely_rebels = anti_tax_rebels } 					set_province_flag = likely_spawns_anti_tax_rebels }
		if = { limit = { likely_rebels = buddhism_rebels } 					set_province_flag = likely_spawns_buddhism_rebels }
		if = { limit = { likely_rebels = catholic_rebels } 					set_province_flag = likely_spawns_catholic_rebels }
		if = { limit = { likely_rebels = confucianism_rebels } 				set_province_flag = likely_spawns_confucianism_rebels }
		if = { limit = { likely_rebels = coptic_rebels } 					set_province_flag = likely_spawns_coptic_rebels }
		if = { limit = { likely_rebels = cossack_rebels } 					set_province_flag = likely_spawns_cossack_rebels }
		if = { limit = { likely_rebels = dreamtime_rebels } 				set_province_flag = likely_spawns_dreamtime_rebels }
		if = { limit = { likely_rebels = eunuch_rebels } 					set_province_flag = likely_spawns_eunuch_rebels }
		if = { limit = { likely_rebels = heretic_rebels } 					set_province_flag = likely_spawns_heretic_rebels }
		if = { limit = { likely_rebels = hinduism_rebels } 					set_province_flag = likely_spawns_hinduism_rebels }
		if = { limit = { likely_rebels = hussite_rebels } 					set_province_flag = likely_spawns_hussite_rebels }
		if = { limit = { likely_rebels = ibadi_rebels } 					set_province_flag = likely_spawns_ibadi_rebels }
		if = { limit = { likely_rebels = ikko_ikki_rebels } 				set_province_flag = likely_spawns_ikko_ikki_rebels }
		if = { limit = { likely_rebels = inti_rebels } 						set_province_flag = likely_spawns_inti_rebels }
		if = { limit = { likely_rebels = janissary_rebels } 				set_province_flag = likely_spawns_janissary_rebels }
		if = { limit = { likely_rebels = jewish_rebels } 					set_province_flag = likely_spawns_jewish_rebels }
		if = { limit = { likely_rebels = lollard_rebels } 					set_province_flag = likely_spawns_lollard_rebels }
		if = { limit = { likely_rebels = mahayana_rebels } 					set_province_flag = likely_spawns_mahayana_rebels }
		if = { limit = { likely_rebels = maya_rebels } 						set_province_flag = likely_spawns_maya_rebels }
		if = { limit = { likely_rebels = nahuatl_rebels } 					set_province_flag = likely_spawns_nahuatl_rebels }
		if = { limit = { likely_rebels = nap_republican_rebels } 			set_province_flag = likely_spawns_nap_republican_rebels }
		if = { limit = { likely_rebels = nationalist_rebels } 				set_province_flag = likely_spawns_nationalist_rebels }
		if = { limit = { likely_rebels = noble_rebels } 					set_province_flag = likely_spawns_noble_rebels }
		if = { limit = { likely_rebels = norse_pagan_reformed_rebels } 		set_province_flag = likely_spawns_norse_pagan_reformed_rebels }
		if = { limit = { likely_rebels = orthodox_rebels } 					set_province_flag = likely_spawns_orthodox_rebels }
		if = { limit = { likely_rebels = particularist_rebels } 			set_province_flag = likely_spawns_particularist_rebels }
		if = { limit = { likely_rebels = leadered_peasant_rebels } 			set_province_flag = likely_spawns_leadered_peasant_rebels }
		if = { limit = { likely_rebels = polish_noble_rebels } 				set_province_flag = likely_spawns_polish_noble_rebels }
		if = { limit = { likely_rebels = pretender_rebels } 				set_province_flag = likely_spawns_pretender_rebels }
		if = { limit = { likely_rebels = protestant_rebels } 				set_province_flag = likely_spawns_protestant_rebels }
		if = { limit = { likely_rebels = reformed_rebels } 					set_province_flag = likely_spawns_reformed_rebels }
		if = { limit = { likely_rebels = revolutionary_rebels } 			set_province_flag = likely_spawns_revolutionary_rebels }
		if = { limit = { likely_rebels = ronin_rebels } 					set_province_flag = likely_spawns_ronin_rebels }
		if = { limit = { likely_rebels = shamanism_rebels } 				set_province_flag = likely_spawns_shamanism_rebels }
		if = { limit = { likely_rebels = shiite_rebels } 					set_province_flag = likely_spawns_shiite_rebels }
		if = { limit = { likely_rebels = shinto_rebels } 					set_province_flag = likely_spawns_shinto_rebels }
		if = { limit = { likely_rebels = sikhism_rebels } 					set_province_flag = likely_spawns_sikhism_rebels }
		if = { limit = { likely_rebels = sunni_rebels } 					set_province_flag = likely_spawns_sunni_rebels }
		if = { limit = { likely_rebels = tengri_pagan_reformed_rebels } 	set_province_flag = likely_spawns_tengri_pagan_reformed_rebels }
		if = { limit = { likely_rebels = totemism_rebels } 					set_province_flag = likely_spawns_totemism_rebels }
		if = { limit = { likely_rebels = tribal_rebels } 					set_province_flag = likely_spawns_tribal_rebels }
		if = { limit = { likely_rebels = vajrayana_rebels } 				set_province_flag = likely_spawns_vajrayana_rebels }
		if = { limit = { likely_rebels = zoroastrian_rebels } 				set_province_flag = likely_spawns_zoroastrian_rebels }
	}
}

#Province scope
spawn_likely_rebels = {
	trigger_switch = {
		on_trigger = has_province_flag
		likely_spawns_anglican_rebels = {				spawn_rebels = { type = anglican_rebels size = $size$ } }
		likely_spawns_animism_rebels = {				spawn_rebels = { type = animism_rebels size = $size$ } }
		likely_spawns_anti_tax_rebels = {				spawn_rebels = { type = anti_tax_rebels size = $size$ } }
		likely_spawns_buddhism_rebels = {				spawn_rebels = { type = buddhism_rebels size = $size$ } }
		likely_spawns_catholic_rebels = {				spawn_rebels = { type = catholic_rebels size = $size$ } }
		likely_spawns_confucianism_rebels = {			spawn_rebels = { type = confucianism_rebels size = $size$ } }
		likely_spawns_coptic_rebels = {					spawn_rebels = { type = coptic_rebels size = $size$ } }
		likely_spawns_cossack_rebels = {				spawn_rebels = { type = cossack_rebels size = $size$ } }
		likely_spawns_dreamtime_rebels = {				spawn_rebels = { type = dreamtime_rebels size = $size$ } }
		likely_spawns_eunuch_rebels = {					spawn_rebels = { type = eunuch_rebels size = $size$ } }
		likely_spawns_heretic_rebels = {				spawn_rebels = { type = heretic_rebels size = $size$ } }
		likely_spawns_hinduism_rebels = {				spawn_rebels = { type = hinduism_rebels size = $size$ } }
		likely_spawns_hussite_rebels = {				spawn_rebels = { type = hussite_rebels size = $size$ } }
		likely_spawns_ibadi_rebels = {					spawn_rebels = { type = ibadi_rebels size = $size$ } }
		likely_spawns_ikko_ikki_rebels = {				spawn_rebels = { type = ikko_ikki_rebels size = $size$ } }
		likely_spawns_inti_rebels = {					spawn_rebels = { type = inti_rebels size = $size$ } }
		likely_spawns_janissary_rebels = {				spawn_rebels = { type = janissary_rebels size = $size$ } }
		likely_spawns_jewish_rebels = {					spawn_rebels = { type = jewish_rebels size = $size$ } }
		likely_spawns_lollard_rebels = {				spawn_rebels = { type = lollard_rebels size = $size$ } }
		likely_spawns_mahayana_rebels = {				spawn_rebels = { type = mahayana_rebels size = $size$ } }
		likely_spawns_maya_rebels = {					spawn_rebels = { type = maya_rebels size = $size$ } }
		likely_spawns_nahuatl_rebels = {				spawn_rebels = { type = nahuatl_rebels size = $size$ } }
		likely_spawns_nap_republican_rebels = {			spawn_rebels = { type = nap_republican_rebels size = $size$ } }
		likely_spawns_nationalist_rebels = {			spawn_rebels = { type = nationalist_rebels size = $size$ } }
		likely_spawns_noble_rebels = {					spawn_rebels = { type = noble_rebels size = $size$ } }
		likely_spawns_norse_pagan_reformed_rebels = {	spawn_rebels = { type = norse_pagan_reformed_rebels size = $size$ } }
		likely_spawns_orthodox_rebels = {				spawn_rebels = { type = orthodox_rebels size = $size$ } }
		likely_spawns_particularist_rebels = {			spawn_rebels = { type = particularist_rebels size = $size$ } }
		likely_spawns_leadered_peasant_rebels = {		spawn_rebels = { type = leadered_peasant_rebels size = $size$ } }
		likely_spawns_polish_noble_rebels = {			spawn_rebels = { type = polish_noble_rebels size = $size$ } }
		likely_spawns_pretender_rebels = {				spawn_rebels = { type = pretender_rebels size = $size$ } }
		likely_spawns_protestant_rebels = {				spawn_rebels = { type = protestant_rebels size = $size$ } }
		likely_spawns_reformed_rebels = {				spawn_rebels = { type = reformed_rebels size = $size$ } }
		likely_spawns_revolutionary_rebels = {			spawn_rebels = { type = revolutionary_rebels size = $size$ } }
		likely_spawns_ronin_rebels = {					spawn_rebels = { type = ronin_rebels size = $size$ } }
		likely_spawns_shamanism_rebels = {				spawn_rebels = { type = shamanism_rebels size = $size$ } }
		likely_spawns_shiite_rebels = {					spawn_rebels = { type = shiite_rebels size = $size$ } }
		likely_spawns_shinto_rebels = {					spawn_rebels = { type = shinto_rebels size = $size$ } }
		likely_spawns_sikhism_rebels = {				spawn_rebels = { type = sikhism_rebels size = $size$ } }
		likely_spawns_sunni_rebels = {					spawn_rebels = { type = sunni_rebels size = $size$ } }
		likely_spawns_tengri_pagan_reformed_rebels = {	spawn_rebels = { type = tengri_pagan_reformed_rebels size = $size$ } }
		likely_spawns_totemism_rebels = {				spawn_rebels = { type = totemism_rebels size = $size$ } }
		likely_spawns_tribal_rebels = {					spawn_rebels = { type = tribal_rebels size = $size$ } }
		likely_spawns_vajrayana_rebels = {				spawn_rebels = { type = vajrayana_rebels size = $size$ } }
		likely_spawns_zoroastrian_rebels = {			spawn_rebels = { type = zoroastrian_rebels size = $size$ } }
	}
	hidden_effect = {
		clr_province_flag = likely_spawns_anglican_rebels
		clr_province_flag = likely_spawns_animism_rebels
		clr_province_flag = likely_spawns_anti_tax_rebels
		clr_province_flag = likely_spawns_buddhism_rebels
		clr_province_flag = likely_spawns_catholic_rebels
		clr_province_flag = likely_spawns_confucianism_rebels
		clr_province_flag = likely_spawns_coptic_rebels
		clr_province_flag = likely_spawns_cossack_rebels
		clr_province_flag = likely_spawns_dreamtime_rebels
		clr_province_flag = likely_spawns_eunuch_rebels
		clr_province_flag = likely_spawns_heretic_rebels
		clr_province_flag = likely_spawns_hinduism_rebels
		clr_province_flag = likely_spawns_hussite_rebels
		clr_province_flag = likely_spawns_ibadi_rebels
		clr_province_flag = likely_spawns_ikko_ikki_rebels
		clr_province_flag = likely_spawns_inti_rebels
		clr_province_flag = likely_spawns_janissary_rebels
		clr_province_flag = likely_spawns_jewish_rebels
		clr_province_flag = likely_spawns_lollard_rebels
		clr_province_flag = likely_spawns_mahayana_rebels
		clr_province_flag = likely_spawns_maya_rebels
		clr_province_flag = likely_spawns_nahuatl_rebels
		clr_province_flag = likely_spawns_nap_republican_rebels
		clr_province_flag = likely_spawns_nationalist_rebels
		clr_province_flag = likely_spawns_noble_rebels
		clr_province_flag = likely_spawns_norse_pagan_reformed_rebels
		clr_province_flag = likely_spawns_orthodox_rebels
		clr_province_flag = likely_spawns_particularist_rebels
		clr_province_flag = likely_spawns_leadered_peasant_rebels
		clr_province_flag = likely_spawns_polish_noble_rebels
		clr_province_flag = likely_spawns_pretender_rebels
		clr_province_flag = likely_spawns_protestant_rebels
		clr_province_flag = likely_spawns_reformed_rebels
		clr_province_flag = likely_spawns_revolutionary_rebels
		clr_province_flag = likely_spawns_ronin_rebels
		clr_province_flag = likely_spawns_shamanism_rebels
		clr_province_flag = likely_spawns_shiite_rebels
		clr_province_flag = likely_spawns_shinto_rebels
		clr_province_flag = likely_spawns_sikhism_rebels
		clr_province_flag = likely_spawns_sunni_rebels
		clr_province_flag = likely_spawns_tengri_pagan_reformed_rebels
		clr_province_flag = likely_spawns_totemism_rebels
		clr_province_flag = likely_spawns_tribal_rebels
		clr_province_flag = likely_spawns_vajrayana_rebels
		clr_province_flag = likely_spawns_zoroastrian_rebels
	}
}

ottoman_power_struggle_effect = {
	[[legitimacy_effect]
		if = { limit = { check_variable = { tur_power_struggle_intesity = 100 } } add_legitimacy = -50 add_stability = -1 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 90 } } add_legitimacy = -50 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 80 } } add_legitimacy = -45 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 70 } } add_legitimacy = -40 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 60 } } add_legitimacy = -35 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 50 } } add_legitimacy = -30 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 40 } } add_legitimacy = -25 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 30 } } add_legitimacy = -20 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 20 } } add_legitimacy = -15 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 10 } } add_legitimacy = -10 }
		else = { add_legitimacy = -5 }
	]
	[[republican_tradition_effect]
		if = { limit = { check_variable = { tur_power_struggle_intesity = 100 } } add_republican_tradition = -20 add_stability = -1 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 90 } } add_republican_tradition = -20 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 80 } } add_republican_tradition = -18 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 70 } } add_republican_tradition = -16 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 60 } } add_republican_tradition = -14 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 50 } } add_republican_tradition = -12 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 40 } } add_republican_tradition = -10 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 30 } } add_republican_tradition = -8 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 20 } } add_republican_tradition = -6 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 10 } } add_republican_tradition = -4 }
		else = { add_republican_tradition = -2 }
	]
	[[corruption_effect]
		if = { limit = { check_variable = { tur_power_struggle_intesity = 100 } } add_corruption = 5.0 add_stability = -1 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 90 } } add_corruption = 5.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 80 } } add_corruption = 4.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 70 } } add_corruption = 4.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 60 } } add_corruption = 3.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 50 } } add_corruption = 3.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 40 } } add_corruption = 2.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 30 } } add_corruption = 2.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 20 } } add_corruption = 1.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 10 } } add_corruption = 1.0 }
		else = { add_corruption = 0.5 }
	]
	[[monarch_power_effect]
		if = { limit = { check_variable = { tur_power_struggle_intesity = 100 } } add_adm_power = -250 add_dip_power = -250 add_mil_power = -250 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 90 } } random_list = { 1 = { add_adm_power = -250 } 1 = { add_dip_power = -250 } 1 = { add_mil_power = -250 } } }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 80 } } random_list = { 1 = { add_adm_power = -225 } 1 = { add_dip_power = -225 } 1 = { add_mil_power = -225 } } }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 70 } } random_list = { 1 = { add_adm_power = -200 } 1 = { add_dip_power = -200 } 1 = { add_mil_power = -200 } } }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 60 } } random_list = { 1 = { add_adm_power = -175 } 1 = { add_dip_power = -175 } 1 = { add_mil_power = -175 } } }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 50 } } random_list = { 1 = { add_adm_power = -150 } 1 = { add_dip_power = -150 } 1 = { add_mil_power = -150 } } }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 40 } } random_list = { 1 = { add_adm_power = -125 } 1 = { add_dip_power = -125 } 1 = { add_mil_power = -125 } } }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 30 } } random_list = { 1 = { add_adm_power = -100 } 1 = { add_dip_power = -100 } 1 = { add_mil_power = -100 } } }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 20 } } random_list = { 1 = { add_adm_power = -75 } 1 = { add_dip_power = -75 } 1 = { add_mil_power = -75 } } }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 10 } } random_list = { 1 = { add_adm_power = -50 } 1 = { add_dip_power = -50 } 1 = { add_mil_power = -50 } } }
		else = { random_list = { 1 = { add_adm_power = -25 } 1 = { add_dip_power = -25 } 1 = { add_mil_power = -25 } } }
	]
	[[prestige_effect]
		if = { limit = { check_variable = { tur_power_struggle_intesity = 100 } } add_prestige = -50 add_stability = -1 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 90 } } add_prestige = -50 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 80 } } add_prestige = -45 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 70 } } add_prestige = -40 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 60 } } add_prestige = -35 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 50 } } add_prestige = -30 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 40 } } add_prestige = -25 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 30 } } add_prestige = -20 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 20 } } add_prestige = -15 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 10 } } add_prestige = -10 }
		else = { add_prestige = -5 }
	]
	[[treasury_effect]
		if = { limit = { check_variable = { tur_power_struggle_intesity = 100 } } add_years_of_income = -1.5 add_stability = -1 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 90 } } add_years_of_income = -1.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 80 } } add_years_of_income = -0.9 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 70 } } add_years_of_income = -0.8 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 60 } } add_years_of_income = -0.7 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 50 } } add_years_of_income = -0.6 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 40 } } add_years_of_income = -0.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 30 } } add_years_of_income = -0.4 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 20 } } add_years_of_income = -0.3 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 10 } } add_years_of_income = -0.2 }
		else = { add_years_of_income = -0.1 }
	]
	[[inflation_effect]
		if = { limit = { check_variable = { tur_power_struggle_intesity = 100 } } add_inflation = 5.0 add_stability = -1 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 90 } } add_inflation = 5.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 80 } } add_inflation = 4.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 70 } } add_inflation = 4.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 60 } } add_inflation = 3.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 50 } } add_inflation = 3.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 40 } } add_inflation = 2.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 30 } } add_inflation = 2.0 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 20 } } add_inflation = 1.5 }
		else_if = { limit = { check_variable = { tur_power_struggle_intesity = 10 } } add_inflation = 1.0 }
		else = { add_inflation = 0.5 }
	]

	hidden_effect = {
		random_list = {
			10 = { change_variable = { tur_power_struggle_intesity = 2 } }
			80 = { change_variable = { tur_power_struggle_intesity = 1 } }
			5 = {  }
			4 = { change_variable = { tur_power_struggle_intesity = -1 } }
			1 = { change_variable = { tur_power_struggle_intesity = -2 } }
		}
	}
}

ottoman_power_struggle_rebel_effect = {
	if = { limit = { check_variable = { tur_power_struggle_intesity = 100 } } $province_1$ = { spawn_likely_rebels = { size = 3 } } $province_2$ = { spawn_likely_rebels = { size = 3 } } $province_3$ = { spawn_likely_rebels = { size = 3 } } $province_4$ = { spawn_likely_rebels = { size = 3 } } add_stability = -1 }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 90 } } $province_1$ = { spawn_likely_rebels = { size = 3 } } $province_2$ = { spawn_likely_rebels = { size = 3 } } $province_3$ = { spawn_likely_rebels = { size = 2 } } $province_4$ = { spawn_likely_rebels = { size = 2 } } }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 80 } } $province_1$ = { spawn_likely_rebels = { size = 3 } } $province_2$ = { spawn_likely_rebels = { size = 2 } } $province_3$ = { spawn_likely_rebels = { size = 2 } } $province_4$ = { spawn_likely_rebels = { size = 2 } } }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 70 } } $province_1$ = { spawn_likely_rebels = { size = 2 } } $province_2$ = { spawn_likely_rebels = { size = 2 } } $province_3$ = { spawn_likely_rebels = { size = 2 } } $province_4$ = { spawn_likely_rebels = { size = 2 } } }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 60 } } $province_1$ = { spawn_likely_rebels = { size = 2 } } $province_2$ = { spawn_likely_rebels = { size = 2 } } $province_3$ = { spawn_likely_rebels = { size = 2 } } $province_4$ = { spawn_likely_rebels = { size = 1 } } }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 50 } } $province_1$ = { spawn_likely_rebels = { size = 2 } } $province_2$ = { spawn_likely_rebels = { size = 2 } } $province_3$ = { spawn_likely_rebels = { size = 2 } } }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 40 } } $province_1$ = { spawn_likely_rebels = { size = 2 } } $province_2$ = { spawn_likely_rebels = { size = 2 } } $province_3$ = { spawn_likely_rebels = { size = 1 } } }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 30 } } $province_1$ = { spawn_likely_rebels = { size = 2 } } $province_2$ = { spawn_likely_rebels = { size = 2 } } }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 20 } } $province_1$ = { spawn_likely_rebels = { size = 2 } } $province_2$ = { spawn_likely_rebels = { size = 1 } } }
	else_if = { limit = { check_variable = { tur_power_struggle_intesity = 10 } } $province_1$ = { spawn_likely_rebels = { size = 2 } } }
	else = { $province_1$ = { spawn_likely_rebels = { size = 1 } } }

	hidden_effect = {
		random_list = {
			10 = { change_variable = { tur_power_struggle_intesity = 2 } }
			80 = { change_variable = { tur_power_struggle_intesity = 1 } }
			5 = {  }
			4 = { change_variable = { tur_power_struggle_intesity = -1 } }
			1 = { change_variable = { tur_power_struggle_intesity = -2 } }
		}
	}
}

#Supports the following trade goods
###################################
# grain
# wine
# wool
# cloth
# fish
# fur
# salt
# naval_supplies
# copper
# gold
# iron
# slaves
# ivory
# tea
# chinaware
# spices
# coffee
# cotton
# sugar
# tobacco
# cocoa
# silk
# dyes
# tropical_wood
# livestock
# incense
# glass
# paper
# gems
# coal
# cloves
increase_trade_goods_discovery = {
	custom_tooltip = increase_trade_goods_discovery_$trade_goods$_tt
	set_country_flag = increased_trade_goods_discovery_$trade_goods$
}

increase_gold_discovery = {
	custom_tooltip = por_bandeirantes_tooltip
	set_country_flag = por_bandeirantes_flag
}

enable_improved_consecration = {
	if = {
		limit = {
			has_dlc = "Third Rome"
			religion = orthodox
		}
		custom_tooltip = enable_improved_consecration_tt
	}
	hidden_effect = {
		set_country_flag = has_improved_consecration
		every_owned_province = {
			limit = {
				has_state_patriach = yes
			}
			add_province_modifier = {
				name = consecrated_ground
				duration = -1
				hidden = yes
			}
		}
	}
}

remove_dev_from_building = {
	if = {
		limit = {
			FROM = { full_idea_group = economic_ideas }
			gained_dev_from_eco_building = { building = $building$ }
		}
		add_base_$type$ = -$value$
		if = {
			limit = {
				NOT = { base_$type$ = 1 }
			}
			set_base_$type$ = 1
		}
		hidden_effect = {
			clr_province_flag = built_eco_dev_$building$
		}
	}
}

add_dev_from_building = {
	if = {
		limit = {
			FROM = { full_idea_group = economic_ideas }
			NOT = { gained_dev_from_eco_building = { building = $building$ } }
		}
		add_base_$type$ = $value$
		hidden_effect = {
			set_province_flag = built_eco_dev_$building$
		}
	}
}

#type = army/navy
#leader = general/conquistador/admiral/explorer
create_leader_scaling_with_tradition = {
	if = {
		limit = {
			$type$_tradition = 80
		}
		create_$leader$ = {
			tradition = 100
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 70
		}
		create_$leader$ = {
			tradition = 90
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 60
		}
		create_$leader$ = {
			tradition = 80
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 50
		}
		create_$leader$ = {
			tradition = 70
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 40
		}
		create_$leader$ = {
			tradition = 60
		}
	}
	else_if = {
		limit = {
			$type$_tradition = 30
		}
		create_$leader$ = {
			tradition = 50
		}
	}
	else = {
		create_$leader$ = {
			tradition = 40
		}
	}
	custom_tooltip = create_leader_scaling_with_tradition_tt
}

#type = heavy_ship/light_ship/galley/transport
add_ship_construction_scaled_to_ports = {	
	random_owned_province = {
		limit = {
			has_port = yes
		}
		if = {
			limit = {
				owner = {
					num_of_ports = 10
				}
			}
			add_unit_construction = {
				amount = 5
				type = $type$
				speed = 0.5
				cost = 0
			}
		}
		else_if = {
			limit = {
				owner = {
					num_of_ports = 8
				}
			}
			add_unit_construction = {
				amount = 4
				type = $type$
				speed = 0.5
				cost = 0
			}
		}
		else_if = {
			limit = {
				owner = {
					num_of_ports = 6
				}
			}
			add_unit_construction = {
				amount = 3
				type = $type$
				speed = 0.5
				cost = 0
			}
		}
		else_if = {
			limit = {
				owner = {
					num_of_ports = 4
				}
			}
			add_unit_construction = {
				amount = 2
				type = $type$
				speed = 0.5
				cost = 0
			}
		}
		add_unit_construction = {
			amount = 1
			type = $type$
			speed = 0.5
			cost = 0
		}
	}
}

update_entire_culture = {
	change_primary_culture = $culture$_new
	set_ruler_culture = $culture$_new
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_culture = $culture$_new
	}
	if = {
		limit = {
			has_consort = yes
			consort_culture = $culture$
		}
		set_consort_culture = $culture$_new
	}
	hidden_effect = {
		every_province = {
			limit = {
				culture = $culture$
			}
			change_culture = $culture$_new
		}
		every_country = {
			limit = {
				primary_culture = $culture$
			}
			change_primary_culture = $culture$_new
			set_ruler_culture = $culture$_new
			if = {
				limit = {
					has_heir = yes
				}
				set_heir_culture = $culture$_new
			}
			if = {
				limit = {
					has_consort = yes
					consort_culture = $culture$
				}
				set_consort_culture = $culture$_new
			}
		}
		set_global_flag = updated_$culture$_flag
	}
}

update_entire_culture_foreign = {
	hidden_effect = {
		every_province = {
			limit = {
				culture = $culture$
			}
			change_culture = $culture$_new
		}
		every_country = {
			limit = {
				primary_culture = $culture$
			}
			change_primary_culture = $culture$_new
			set_ruler_culture = $culture$_new
			if = {
				limit = {
					has_heir = yes
				}
				set_heir_culture = $culture$_new
			}
			if = {
				limit = {
					has_consort = yes
					consort_culture = $culture$
				}
				set_consort_culture = $culture$_new
			}
		}
		set_global_flag = updated_$culture$_flag
	}
}

update_entire_culture_group = {
	change_primary_culture = $culture$_new
	set_ruler_culture = $culture$_new
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_culture = $culture$_new
	}
	if = {
		limit = {
			has_consort = yes
			OR = {
				consort_culture = $culture1$
				[[culture2]consort_culture = $culture2$]
				[[culture3]consort_culture = $culture3$]
				[[culture4]consort_culture = $culture4$]
				[[culture5]consort_culture = $culture5$]
				[[culture6]consort_culture = $culture6$]
				[[culture7]consort_culture = $culture7$]
				[[culture8]consort_culture = $culture8$]
				[[culture9]consort_culture = $culture9$]
				[[culture10]consort_culture = $culture10$]
				[[culture11]consort_culture = $culture11$]
				[[culture11]consort_culture = $culture11$]
				[[culture12]consort_culture = $culture12$]
				[[culture13]consort_culture = $culture13$]
				[[culture14]consort_culture = $culture14$]
				[[culture15]consort_culture = $culture15$]
				[[culture16]consort_culture = $culture16$]
				[[culture17]consort_culture = $culture17$]
				[[culture18]consort_culture = $culture18$]
				[[culture19]consort_culture = $culture19$]
				[[culture20]consort_culture = $culture20$]
			}
			consort_culture = $culture$
		}
		set_consort_culture = $culture$_new
	}
	hidden_effect = {
		every_province = {
			limit = {
				OR = {
					culture = $culture1$
					[[culture2]culture = $culture2$]
					[[culture3]culture = $culture3$]
					[[culture4]culture = $culture4$]
					[[culture5]culture = $culture5$]
					[[culture6]culture = $culture6$]
					[[culture7]culture = $culture7$]
					[[culture8]culture = $culture8$]
					[[culture9]culture = $culture9$]
					[[culture10]culture = $culture10$]
					[[culture11]culture = $culture11$]
					[[culture11]culture = $culture11$]
					[[culture12]culture = $culture12$]
					[[culture13]culture = $culture13$]
					[[culture14]culture = $culture14$]
					[[culture15]culture = $culture15$]
					[[culture16]culture = $culture16$]
					[[culture17]culture = $culture17$]
					[[culture18]culture = $culture18$]
					[[culture19]culture = $culture19$]
					[[culture20]culture = $culture20$]
				}
			}
			change_culture = $culture$_new
		}
		every_country = {
			limit = {
				OR = {
					primary_culture = $culture1$
					[[culture2]primary_culture = $culture2$]
					[[culture3]primary_culture = $culture3$]
					[[culture4]primary_culture = $culture4$]
					[[culture5]primary_culture = $culture5$]
					[[culture6]primary_culture = $culture6$]
					[[culture7]primary_culture = $culture7$]
					[[culture8]primary_culture = $culture8$]
					[[culture9]primary_culture = $culture9$]
					[[culture10]primary_culture = $culture10$]
					[[culture11]primary_culture = $culture11$]
					[[culture11]primary_culture = $culture11$]
					[[culture12]primary_culture = $culture12$]
					[[culture13]primary_culture = $culture13$]
					[[culture14]primary_culture = $culture14$]
					[[culture15]primary_culture = $culture15$]
					[[culture16]primary_culture = $culture16$]
					[[culture17]primary_culture = $culture17$]
					[[culture18]primary_culture = $culture18$]
					[[culture19]primary_culture = $culture19$]
					[[culture20]primary_culture = $culture20$]
				}
			}
			change_primary_culture = $culture$_new
			set_ruler_culture = $culture$_new
			if = {
				limit = {
					has_heir = yes
				}
				set_heir_culture = $culture$_new
			}
			if = {
				limit = {
					has_consort = yes
					OR = {
						consort_culture = $culture1$
						[[culture2]consort_culture = $culture2$]
						[[culture3]consort_culture = $culture3$]
						[[culture4]consort_culture = $culture4$]
						[[culture5]consort_culture = $culture5$]
						[[culture6]consort_culture = $culture6$]
						[[culture7]consort_culture = $culture7$]
						[[culture8]consort_culture = $culture8$]
						[[culture9]consort_culture = $culture9$]
						[[culture10]consort_culture = $culture10$]
						[[culture11]consort_culture = $culture11$]
						[[culture11]consort_culture = $culture11$]
						[[culture12]consort_culture = $culture12$]
						[[culture13]consort_culture = $culture13$]
						[[culture14]consort_culture = $culture14$]
						[[culture15]consort_culture = $culture15$]
						[[culture16]consort_culture = $culture16$]
						[[culture17]consort_culture = $culture17$]
						[[culture18]consort_culture = $culture18$]
						[[culture19]consort_culture = $culture19$]
						[[culture20]consort_culture = $culture20$]
					}
				}
				set_consort_culture = $culture$_new
			}
		}
		set_global_flag = updated_$culture$_flag
	}
}

create_new_culture_group = {
	change_primary_culture = $culture$_new
	set_ruler_culture = $culture$_new
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_culture = $culture$_new
	}
	if = {
		limit = {
			has_consort = yes
			OR = {
				consort_culture = $culture$
				[[culture2]consort_culture = $culture2$]
				[[culture3]consort_culture = $culture3$]
				[[culture4]consort_culture = $culture4$]
				[[culture5]consort_culture = $culture5$]
				[[culture6]consort_culture = $culture6$]
				[[culture7]consort_culture = $culture7$]
				[[culture8]consort_culture = $culture8$]
				[[culture9]consort_culture = $culture9$]
				[[culture10]consort_culture = $culture10$]
				[[culture11]consort_culture = $culture11$]
				[[culture11]consort_culture = $culture11$]
				[[culture12]consort_culture = $culture12$]
				[[culture13]consort_culture = $culture13$]
				[[culture14]consort_culture = $culture14$]
				[[culture15]consort_culture = $culture15$]
				[[culture16]consort_culture = $culture16$]
				[[culture17]consort_culture = $culture17$]
				[[culture18]consort_culture = $culture18$]
				[[culture19]consort_culture = $culture19$]
				[[culture20]consort_culture = $culture20$]
			}
			consort_culture = $culture$
		}
		set_consort_culture = $culture$_new
	}
	hidden_effect = {
		every_province = {
			limit = {
				OR = {
					culture = $culture$
					[[culture2]culture = $culture2$]
					[[culture3]culture = $culture3$]
					[[culture4]culture = $culture4$]
					[[culture5]culture = $culture5$]
					[[culture6]culture = $culture6$]
					[[culture7]culture = $culture7$]
					[[culture8]culture = $culture8$]
					[[culture9]culture = $culture9$]
					[[culture10]culture = $culture10$]
					[[culture11]culture = $culture11$]
					[[culture11]culture = $culture11$]
					[[culture12]culture = $culture12$]
					[[culture13]culture = $culture13$]
					[[culture14]culture = $culture14$]
					[[culture15]culture = $culture15$]
					[[culture16]culture = $culture16$]
					[[culture17]culture = $culture17$]
					[[culture18]culture = $culture18$]
					[[culture19]culture = $culture19$]
					[[culture20]culture = $culture20$]
				}
			}
			trigger_switch = {
				on_trigger = culture
				$culture$ = { change_culture = $culture$_new }
				[[culture2]$culture2$ = { change_culture = $culture2$_new }]
				[[culture3]$culture3$ = { change_culture = $culture3$_new }]
				[[culture4]$culture4$ = { change_culture = $culture4$_new }]
				[[culture5]$culture5$ = { change_culture = $culture5$_new }]
				[[culture6]$culture6$ = { change_culture = $culture6$_new }]
				[[culture7]$culture7$ = { change_culture = $culture7$_new }]
				[[culture8]$culture8$ = { change_culture = $culture8$_new }]
				[[culture9]$culture9$ = { change_culture = $culture9$_new }]
				[[culture10]$culture10$ = { change_culture = $culture10$_new }]
				[[culture11]$culture11$ = { change_culture = $culture11$_new }]
				[[culture11]$culture11$ = { change_culture = $culture11$_new }]
				[[culture12]$culture12$ = { change_culture = $culture12$_new }]
				[[culture13]$culture13$ = { change_culture = $culture13$_new }]
				[[culture14]$culture14$ = { change_culture = $culture14$_new }]
				[[culture15]$culture15$ = { change_culture = $culture15$_new }]
				[[culture16]$culture16$ = { change_culture = $culture16$_new }]
				[[culture17]$culture17$ = { change_culture = $culture17$_new }]
				[[culture18]$culture18$ = { change_culture = $culture18$_new }]
				[[culture19]$culture19$ = { change_culture = $culture19$_new }]
				[[culture20]$culture20$ = { change_culture = $culture20$_new }]
			}
		}
		every_country = {
			limit = {
				OR = {
					primary_culture = $culture$
					[[culture2]primary_culture = $culture2$]
					[[culture3]primary_culture = $culture3$]
					[[culture4]primary_culture = $culture4$]
					[[culture5]primary_culture = $culture5$]
					[[culture6]primary_culture = $culture6$]
					[[culture7]primary_culture = $culture7$]
					[[culture8]primary_culture = $culture8$]
					[[culture9]primary_culture = $culture9$]
					[[culture10]primary_culture = $culture10$]
					[[culture11]primary_culture = $culture11$]
					[[culture11]primary_culture = $culture11$]
					[[culture12]primary_culture = $culture12$]
					[[culture13]primary_culture = $culture13$]
					[[culture14]primary_culture = $culture14$]
					[[culture15]primary_culture = $culture15$]
					[[culture16]primary_culture = $culture16$]
					[[culture17]primary_culture = $culture17$]
					[[culture18]primary_culture = $culture18$]
					[[culture19]primary_culture = $culture19$]
					[[culture20]primary_culture = $culture20$]
				}
			}
			trigger_switch = {
				on_trigger = primary_culture
				$culture$ = {
					change_primary_culture = $culture$_new
					set_ruler_culture = $culture$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture$_new }
					if = { limit = { has_consort = yes } set_consort_culture = $culture$_new }
				}
				[[culture2]$culture2$ = {
					change_primary_culture = $culture2$_new
					set_ruler_culture = $culture2$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture2$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture2$_new }
				}]
				[[culture3]$culture3$ = {
					change_primary_culture = $culture3$_new
					set_ruler_culture = $culture3$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture3$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture3$_new }
				}]
				[[culture4]$culture4$ = {
					change_primary_culture = $culture4$_new
					set_ruler_culture = $culture4$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture4$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture4$_new }
				}]
				[[culture5]$culture5$ = {
					change_primary_culture = $culture5$_new
					set_ruler_culture = $culture5$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture5$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture5$_new }
				}]
				[[culture6]$culture6$ = {
					change_primary_culture = $culture6$_new
					set_ruler_culture = $culture6$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture6$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture6$_new }
				}]
				[[culture7]$culture7$ = {
					change_primary_culture = $culture7$_new
					set_ruler_culture = $culture7$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture7$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture7$_new }
				}]
				[[culture8]$culture8$ = {
					change_primary_culture = $culture8$_new
					set_ruler_culture = $culture8$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture8$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture8$_new }
				}]
				[[culture9]$culture9$ = {
					change_primary_culture = $culture9$_new
					set_ruler_culture = $culture9$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture9$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture9$_new }
				}]
				[[culture10]$culture10$ = {
					change_primary_culture = $culture10$_new
					set_ruler_culture = $culture10$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture10$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture10$_new }
				}]
				[[culture11]$culture11$ = {
					change_primary_culture = $culture11$_new
					set_ruler_culture = $culture11$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture11$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture11$_new }
				}]
				[[culture11]$culture11$ = {
					change_primary_culture = $culture11$_new
					set_ruler_culture = $culture11$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture11$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture11$_new }
				}]
				[[culture12]$culture12$ = {
					change_primary_culture = $culture12$_new
					set_ruler_culture = $culture12$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture12$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture12$_new }
				}]
				[[culture13]$culture13$ = {
					change_primary_culture = $culture13$_new
					set_ruler_culture = $culture13$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture13$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture13$_new }
				}]
				[[culture14]$culture14$ = {
					change_primary_culture = $culture14$_new
					set_ruler_culture = $culture14$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture14$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture14$_new }
				}]
				[[culture15]$culture15$ = {
					change_primary_culture = $culture15$_new
					set_ruler_culture = $culture15$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture15$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture15$_new }
				}]
				[[culture16]$culture16$ = {
					change_primary_culture = $culture16$_new
					set_ruler_culture = $culture16$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture16$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture16$_new }
				}]
				[[culture17]$culture17$ = {
					change_primary_culture = $culture17$_new
					set_ruler_culture = $culture17$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture17$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture17$_new }
				}]
				[[culture18]$culture18$ = {
					change_primary_culture = $culture18$_new
					set_ruler_culture = $culture18$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture18$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture18$_new }
				}]
				[[culture19]$culture19$ = {
					change_primary_culture = $culture19$_new
					set_ruler_culture = $culture19$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture19$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture19$_new }
				}]
				[[culture20]$culture20$ = {
					change_primary_culture = $culture20$_new
					set_ruler_culture = $culture20$_new
					if = { limit = { has_heir = yes } set_heir_culture = $culture20$ }
					if = { limit = { has_consort = yes } set_consort_culture = $culture20$_new }
				}]
			}
		}
		set_global_flag = updated_$culture_group$_flag
	}
}
#Supports the following trade goods		Base prices
# grain									2.5
# wine									2.5
# wool									2.5
# cloth									3
# fish									2.5
# fur									2
# salt									3
# naval_supplies						2
# copper								3
# gold									10	#Technically 0, but let us calculate with 10
# iron									3
# slaves								2
# ivory									4
# tea									3
# chinaware								3
# spices								3
# coffee								3
# cotton								3
# sugar									3
# tobacco								3
# cocoa									4
# silk									4
# dyes									4
# tropical_wood							2
# livestock								2
# incense								2.5
# glass									3
# paper									3.5
# gems									4
# coal									10
# cloves								8
# unknown								0	#Special and should not count

determine_value_of_trade_goods_grain = {
	set_variable = {
		which = base_value_grain
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_grain
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = mountain
						has_terrain = coastal_desert
						has_terrain = forest
						has_terrain = woods
						has_terrain = hills
						has_terrain = jungle
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.15
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = highlands
						has_terrain = marsh
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.25
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_climate = arid
						has_climate = tropical
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.25
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = drylands
						has_terrain = savannah
						has_terrain = steppe
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.6
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = severe_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.35
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = normal_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = farmlands
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						region = poland_region
						region = ruthenia_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = grain }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = grain } }
				}
			}
			multiply_variable = {
				which = chance_modifier_grain
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_grain
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_grain
				which = chance_modifier_grain
			}
		}
	}
}
determine_value_of_trade_goods_wine = {
	set_variable = {
		which = base_value_wine
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_wine
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					has_winter = normal_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 0.25
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = farmlands
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 1.25
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = hills
						has_terrain = highlands
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 1.25
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						area = cuyo_area
						region = france_region
						region = italy_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					culture_group = french
					culture_group = iberian
					culture_group = latin
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 1.1
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = wine }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = wine } }
				}
			}
			multiply_variable = {
				which = chance_modifier_wine
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_wine
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_wine
				which = chance_modifier_wine
			}
		}
	}
}
determine_value_of_trade_goods_wool = {
	set_variable = {
		which = base_value_wool
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_wool
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = grasslands
						has_terrain = hills
						has_terrain = forest
						has_terrain = woods
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_wool
				value = 0.15
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = desert
						has_terrain = savannah
						has_terrain = highlands
						has_terrain = drylands
						has_climate = arid
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_wool
				value = 1.25
			}
		}
		if = {
			limit = {
				ROOT = {
					region = central_asia_region
				}
			}
			multiply_variable = {
				which = chance_modifier_wool
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					region = tibet_region
				}
			}
			multiply_variable = {
				which = chance_modifier_wool
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = wool }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = wool } }
				}
			}
			multiply_variable = {
				which = chance_modifier_wool
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_wool
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_wool
				which = chance_modifier_wool
			}
		}
	}
}
determine_value_of_trade_goods_cloth = {
	set_variable = {
		which = base_value_cloth
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_cloth
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					development_discounting_tribal = 12
				}
			}
			multiply_variable = {
				which = chance_modifier_cloth
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = cloth }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = cloth } }
				}
			}
			multiply_variable = {
				which = chance_modifier_cloth
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_cloth
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_cloth
				which = chance_modifier_cloth
			}
		}
	}
}
determine_value_of_trade_goods_fish = {
	set_variable = {
		which = base_value_fish
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_fish
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						region = carribeans_region
						region = malaya_region
						region = moluccas_region
						region = indonesia_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_fish
				value = 0.65
			}
		}
		if = {
			limit = {
				ROOT = {
					area = newfoundland_area
				}
			}
			multiply_variable = {
				which = chance_modifier_fish
				value = 15
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = coastline
						has_terrain = coastal_desert
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_fish
				value = 1.1
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = glacier
				}
			}
			multiply_variable = {
				which = chance_modifier_fish
				value = 1.2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = fish }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = fish } }
				}
			}
			multiply_variable = {
				which = chance_modifier_fish
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_fish
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_fish
				which = chance_modifier_fish
			}
		}
	}
}
determine_value_of_trade_goods_fur = {
	set_variable = {
		which = base_value_fur
		value = 2
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_fur
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = savannah
						has_terrain = grasslands
						has_terrain = highlands
					}
					has_winter = mild_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 0.75
			}
		}
		if = {
			limit = {
				ROOT = {
					NOT = { native_size = 1 }
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					native_size = 1
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = forest
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = normal_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 1.6
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = severe_winter
					NOT = { has_terrain = glacier }
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 2.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = fur }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = fur } }
				}
			}
			multiply_variable = {
				which = chance_modifier_fur
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_fur
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_fur
				which = chance_modifier_fur
			}
		}
	}
}
determine_value_of_trade_goods_salt = {
	set_variable = {
		which = base_value_salt
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_salt
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = desert
						AND = {
							has_terrain = marsh
							NOT = { has_climate = arctic } #Hudson Bay
						}
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_salt
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					region = peru_region
				}
			}
			multiply_variable = {
				which = chance_modifier_salt
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					area = western_sahara_area
				}
			}
			multiply_variable = {
				which = chance_modifier_salt
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = salt }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = salt } }
				}
			}
			multiply_variable = {
				which = chance_modifier_salt
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_salt
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_salt
				which = chance_modifier_salt
			}
		}
	}
}
determine_value_of_trade_goods_naval_supplies = {
	set_variable = {
		which = base_value_naval_supplies
		value = 2
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_naval_supplies
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					region = carribeans_region
				}
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 0.65
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = mountain
						has_terrain = grasslands
						region = central_africa_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 0.5
			}
		}
		if = {
			limit = {
				NOT = { num_of_ports = 1 }
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = coastline
						has_climate = tropical
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 0.75
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = forest
						has_terrain = woods
						has_terrain = hills
						has_terrain = jungle
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = naval_supplies }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = naval_supplies } }
				}
			}
			multiply_variable = {
				which = chance_modifier_naval_supplies
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_naval_supplies
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_naval_supplies
				which = chance_modifier_naval_supplies
			}
		}
	}
}
determine_value_of_trade_goods_copper = {
	set_variable = {
		which = base_value_copper
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_copper
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					region = central_africa_region
				}
			}
			multiply_variable = {
				which = chance_modifier_copper
				value = 0.7
			}
		}
		if = {
			limit = {
				ROOT = {
					is_random_new_world = yes
					OR = {
						has_terrain = mountain
						has_terrain = highlands
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_copper
				value = 1.1
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						area = minas_gerais_area
						area = diamantina_area
						area = mato_grosso_area
						area = ofaie_area
						area = great_valley_area
						area = susquehanna_area
						area = hudson_valley_area
						area = lake_superior_area
						area = south_iroquoisia_area
						region = west_siberia_region
						region = east_siberia_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_copper
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = copper }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = copper } }
				}
			}
			multiply_variable = {
				which = chance_modifier_copper
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_copper
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_copper
				which = chance_modifier_copper
			}
		}
	}
}
determine_value_of_trade_goods_gold = {
	set_variable = {
		which = base_value_gold
		value = 10
	}
	if = {
		limit = {
			#has_chance_scaling_cost = yes
			always = no
		}
		set_variable = {
			which = chance_modifier_gold
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					is_random_new_world = yes
					has_terrain = mountain
					continent = new_world #Always in RNW
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					normal_or_historical_nations = no
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					region = peru_region
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 3.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						province_id = 852		# Mexico
						province_id = 853		# Huastec
						province_id = 854		# Sayultecas
						province_id = 2617		# Huichol
						province_id = 856		# Zacatecas
						province_id = 857		# Guichichil
						province_id = 858		# Tamaulipas
						province_id = 2615		# Guamares
						province_id = 4781		# Transvaal (Johannesburg mines)
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 4
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						area = minas_gerais_area
						area = diamantina_area
						area = mato_grosso_area
						area = ofaie_area
						area = goias_area
						area = pontal_area
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 3.5
			}
		}
		if = {
			limit = {
				OR = {
					has_country_flag = por_bandeirantes_flag
					colonial_parent = { has_country_flag = por_bandeirantes_flag }
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = gold }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = gold } }
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					province_id = 856
				}
			}
			multiply_variable = {
				which = chance_modifier_gold
				value = 100
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_gold
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_gold
				which = chance_modifier_gold
			}
		}
	}
}
determine_value_of_trade_goods_iron = {
	set_variable = {
		which = base_value_iron
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_iron
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					normal_or_historical_nations = no
					OR = {
						has_terrain = mountain
						has_terrain = hills
						has_terrain = highlands
						province_id = 990
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_iron
				value = 1.2
			}
		}
		if = {
			limit = {
				ROOT = {
					province_id = 990
				}
			}
			multiply_variable = {
				which = chance_modifier_iron
				value = 20
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_iron
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_iron
				which = chance_modifier_iron
			}
		}
	}
}
determine_value_of_trade_goods_slaves = {
	set_variable = {
		which = base_value_slaves
		value = 2
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_slaves
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						region = horn_of_africa_region
						region = kongo_region
						area = west_africa_coast_area
						area = gulf_of_guinea_area
						area = benin_area
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_slaves
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					region = south_africa_region
				}
			}
			multiply_variable = {
				which = chance_modifier_slaves
				value = 0.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_slaves
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = slaves }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = slaves } }
				}
			}
			multiply_variable = {
				which = chance_modifier_slaves
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_slaves
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_slaves
				which = chance_modifier_slaves
			}
		}
	}
}
determine_value_of_trade_goods_ivory = {
	set_variable = {
		which = base_value_ivory
		value = 4
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_ivory
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						region = malaya_region
						region = moluccas_region
						region = indonesia_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_ivory
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = jungle
						has_terrain = savannah
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_ivory
				value = 1.25
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_ivory
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = ivory }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = ivory } }
				}
			}
			multiply_variable = {
				which = chance_modifier_ivory
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_ivory
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_ivory
				which = chance_modifier_ivory
			}
		}
	}
}
determine_value_of_trade_goods_tea = {
	set_variable = {
		which = base_value_tea
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_tea
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = farmlands
				}
			}
			multiply_variable = {
				which = chance_modifier_tea
				value = 1.2
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						area = assam_area
						AND = {
							has_climate = tropical
							is_random_new_world = yes
						}
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_tea
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						area = banda_oriental_area #Yerba Mate
						area = rio_grande_do_sol_area #Yerba Mate
						area = buenos_aires_area #Yerba Mate
						area = misiones_area #Yerba Mate
						area = beni_area #Yerba Mate
						area = moxos_area #Yerba Mate
						area = paraguay_area #Yerba Mate
						area = sao_paolo_area  #Yerba Mate
						area = west_sao_paolo_area  #Yerba Mate
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_tea
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = tea }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = tea } }
				}
			}
			multiply_variable = {
				which = chance_modifier_tea
				value = 2
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_tea
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_tea
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_tea
				which = chance_modifier_tea
			}
		}
	}
}
determine_value_of_trade_goods_chinaware = {
	set_variable = {
		which = base_value_chinaware
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_chinaware
			value = 1
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_chinaware
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = chinaware }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = chinaware } }
				}
			}
			multiply_variable = {
				which = chance_modifier_chinaware
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_chinaware
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_chinaware
				which = chance_modifier_chinaware
			}
		}
	}
}
determine_value_of_trade_goods_spices = {
	set_variable = {
		which = base_value_spices
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_spices
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					area = indian_ocean_islands_area
				}
			}
			multiply_variable = {
				which = chance_modifier_spices
				value = 0.75
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						continent = north_america
						continent = south_america
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_spices
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						region = malaya_region
						region = indonesia_region
						region = moluccas_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_spices
				value = 1.25
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_spices
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = spices }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = spices } }
				}
			}
			multiply_variable = {
				which = chance_modifier_spices
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_spices
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_spices
				which = chance_modifier_spices
			}
		}
	}
}
determine_value_of_trade_goods_coffee = {
	set_variable = {
		which = base_value_coffee
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_coffee
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					region = colombia_region
				}
			}
			multiply_variable = {
				which = chance_modifier_coffee
				value = 1.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_coffee
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = coffee }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = coffee } }
				}
			}
			multiply_variable = {
				which = chance_modifier_coffee
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_coffee
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_coffee
				which = chance_modifier_coffee
			}
		}
	}
}
determine_value_of_trade_goods_cotton = {
	set_variable = {
		which = base_value_cotton
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_cotton
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = farmlands
						has_terrain = grasslands
						region = southeast_america_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_cotton
				value = 1.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_cotton
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = cotton }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = cotton } }
				}
			}
			multiply_variable = {
				which = chance_modifier_cotton
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_cotton
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_cotton
				which = chance_modifier_cotton
			}
		}
	}
}
determine_value_of_trade_goods_sugar = {
	set_variable = {
		which = base_value_sugar
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_sugar
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					is_random_new_world = no
					NOT = { province_id = 481 }
					OR = {
						region = carribeans_region
						area = ceara_area
						area = pernambuco_area
						area = bahia_area
						area = guyana_area
						area = suriname_area
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_sugar
				value = 2.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_sugar
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = sugar }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = sugar } }
				}
			}
			multiply_variable = {
				which = chance_modifier_sugar
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_sugar
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_sugar
				which = chance_modifier_sugar
			}
		}
	}
}
determine_value_of_trade_goods_tobacco = {
	set_variable = {
		which = base_value_tobacco
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_tobacco
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						region = northeast_america_region
						region = southeast_america_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_tobacco
				value = 2.5
			}
		}
		if = {
			limit = {
				ROOT = {
					region = australia_region
				}
			}
			multiply_variable = {
				which = chance_modifier_tobacco
				value = 0.2
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_tobacco
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = tobacco }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = tobacco } }
				}
			}
			multiply_variable = {
				which = chance_modifier_tobacco
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_tobacco
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_tobacco
				which = chance_modifier_tobacco
			}
		}
	}
}
determine_value_of_trade_goods_cocoa = {
	set_variable = {
		which = base_value_cocoa
		value = 4
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_cocoa
			value = 1
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = cocoa }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = cocoa } }
				}
			}
			multiply_variable = {
				which = chance_modifier_cocoa
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_cocoa
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_cocoa
				which = chance_modifier_cocoa
			}
		}
	}
}
determine_value_of_trade_goods_silk = {
	set_variable = {
		which = base_value_silk
		value = 4
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_silk
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					normal_or_historical_nations = no
					FROM = { NOT = { religion_group = dharmic } }
					FROM = { NOT = { religion_group = eastern } }
				}
			}
			multiply_variable = {
				which = chance_modifier_silk
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					normal_or_historical_nations = no
					OR = {
						region = south_china_region
						region = xinan_region
						region = north_china_region
						region = hindusthan_region
						region = bengal_region
						region = deccan_region
						region = coromandel_region
					}
					development_discounting_tribal = 20
				}
			}
			multiply_variable = {
				which = chance_modifier_silk
				value = 1.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_silk
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = silk }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = silk } }
				}
			}
			multiply_variable = {
				which = chance_modifier_silk
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_silk
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_silk
				which = chance_modifier_silk
			}
		}
	}
}
determine_value_of_trade_goods_dyes = {
	set_variable = {
		which = base_value_dyes
		value = 4
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_dyes
			value = 1
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_dyes
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = dyes }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = dyes } }
				}
			}
			multiply_variable = {
				which = chance_modifier_dyes
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_dyes
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_dyes
				which = chance_modifier_dyes
			}
		}
	}
}
determine_value_of_trade_goods_tropical_wood = {
	set_variable = {
		which = base_value_tropical_wood
		value = 2
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_tropical_wood
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					area = amazon_area
				}
			}
			multiply_variable = {
				which = chance_modifier_tropical_wood
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						region = malaya_region
						region = moluccas_region
						region = indonesia_region
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_tropical_wood
				value = 0.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_tropical_wood
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = tropical_wood }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = tropical_wood } }
				}
			}
			multiply_variable = {
				which = chance_modifier_tropical_wood
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_tropical_wood
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_tropical_wood
				which = chance_modifier_tropical_wood
			}
		}
	}
}
determine_value_of_trade_goods_livestock = {
	set_variable = {
		which = base_value_livestock
		value = 2
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_livestock
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					province_id = 2002
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 0.05
			}
		}
		if = {
			limit = {
				ROOT = {
					has_winter = severe_winter
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 0.75
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = desert
						has_terrain = savannah
						has_terrain = highlands
						has_terrain = drylands
						has_climate = arid
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 1.25
			}
		}
		if = {
			limit = {
				ROOT = {
					has_terrain = steppe
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					region = central_asia_region
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					region = mongolia_region
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					region = tibet_region
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					region = central_africa_region
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = livestock }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = livestock } }
				}
			}
			multiply_variable = {
				which = chance_modifier_livestock
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_livestock
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_livestock
				which = chance_modifier_livestock
			}
		}
	}
}
determine_value_of_trade_goods_incense = {
	set_variable = {
		which = base_value_incense
		value = 2.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_incense
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					area = indian_ocean_islands_area
				}
			}
			multiply_variable = {
				which = chance_modifier_incense
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					region = arabia_region
				}
			}
			multiply_variable = {
				which = chance_modifier_incense
				value = 1.25
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_incense
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = incense }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = incense } }
				}
			}
			multiply_variable = {
				which = chance_modifier_incense
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_incense
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_incense
				which = chance_modifier_incense
			}
		}
	}
}
determine_value_of_trade_goods_glass = {
	set_variable = {
		which = base_value_glass
		value = 3
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_glass
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					development_discounting_tribal = 22
				}
			}
			multiply_variable = {
				which = chance_modifier_glass
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = glass }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = glass } }
				}
			}
			multiply_variable = {
				which = chance_modifier_glass
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_glass
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_glass
				which = chance_modifier_glass
			}
		}
	}
}
determine_value_of_trade_goods_paper = {
	set_variable = {
		which = base_value_paper
		value = 3.5
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_paper
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					development_discounting_tribal = 22
				}
			}
			multiply_variable = {
				which = chance_modifier_paper
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = paper }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = paper } }
				}
			}
			multiply_variable = {
				which = chance_modifier_paper
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_paper
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_paper
				which = chance_modifier_paper
			}
		}
	}
}
determine_value_of_trade_goods_gems = {
	set_variable = {
		which = base_value_gems
		value = 4
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_gems
			value = 1
		}
		if = {
			limit = {
				ROOT = {
					region = moluccas_region
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 1.2
			}
		}
		if = {
			limit = {
				ROOT = {
					region = indonesia_region
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 0.75
			}
		}
		if = {
			limit = {
				ROOT = {
					continent = oceania
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 0.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						continent = south_america
						continent = north_america
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						area = diamantina_area
						area = bogota_area
						area = murray_river_area #Opal
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						province_id = 1093 #Opal
						province_id = 2736 #Opal
						province_id = 4862 #Opal
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 2
			}
		}
		if = {
			limit = {
				ROOT = {
					region = brazil_region
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					OR = {
						has_terrain = mountain
						has_terrain = jungle
						has_terrain = hills
						has_terrain = highlands
						has_terrain = coastline #Pearls
					}
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					is_random_new_world = yes
					has_terrain = mountain
					continent = new_world #Always in RNW
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 1.5
			}
		}
		if = {
			limit = {
				ROOT = {
					normal_or_historical_nations = no
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 1.5
			}
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 1.5
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = gems }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = gems } }
				}
			}
			multiply_variable = {
				which = chance_modifier_gems
				value = 1.5
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_gems
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_gems
				which = chance_modifier_gems
			}
		}
	}
}
determine_value_of_trade_goods_coal = {
	set_variable = {
		which = base_value_coal
		value = 10
	}
	if = {
		limit = {
			#has_chance_scaling_cost = yes
			always = no
		}
		set_variable = {
			which = chance_modifier_coal
			value = 1
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_coal
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_coal
				which = chance_modifier_coal
			}
		}
	}
}
determine_value_of_trade_goods_cloves = {
	set_variable = {
		which = base_value_cloves
		value = 8
	}
	if = {
		limit = {
			has_chance_scaling_cost = yes
		}
		set_variable = {
			which = chance_modifier_cloves
			value = 1
		}
		if = {
			limit = {
				has_country_flag = encourage_cash_crops_flag
			}
			multiply_variable = {
				which = chance_modifier_cloves
				value = 2
			}
		}
		if = {
			limit = {
				OR = {
					has_increased_trade_goods_discovery = { trade_goods = cloves }
					colonial_parent = { has_increased_trade_goods_discovery = { trade_goods = cloves } }
				}
			}
			multiply_variable = {
				which = chance_modifier_cloves
				value = 2
			}
		}
		if = {
			limit = {
				NOT = {
					is_variable_equal = {
						which = chance_modifier_cloves
						value = 0
					}
				}
			}
			divide_variable = {
				which = base_value_cloves
				which = chance_modifier_cloves
			}
		}
	}
}
determine_value_of_trade_goods_unknown = {
	set_variable = {
		which = base_value_unknown
		value = 0
	}
}

# The design behind it is the following:
# 1. You colonize a province
# 2. A pop-up event appears which gives you the choice to select the trade good for the province
# 3. Every trade good has an own base price assigned to them. This base price should be their base value * 5 Ducats.
# 4. Trade goods above 3 value also cost ADM power.
# 5. Every time you select a certain trade good, the price increases
# 6. The new price is calculated with this formula: (1 + (times you upgraded it)) * 5 (base trade good price)
# 7. ADM costs are calculated as follows: (base trade good pirce - 2.5) * 25 * (times YOU upgraded it) as long (base trade good pirce - 2.5) => 0
# 7. Gold will be counted as having a trade value of 10 Ducats so not all of the whole new world becomes one huge gold cluster

calculate_trade_goods_price = {
	owner = {
		determine_value_of_trade_goods_$trade_goods$ = yes
		set_variable = {
			which = final_ducat_price_$trade_goods$
			value = 1
		}
		set_variable = {
			which = final_adm_cost_$trade_goods$
			which = base_value_$trade_goods$
		}
		subtract_variable = {
			which = final_adm_cost_$trade_goods$
			value = 2.5
		}
		multiply_variable = {
			which = final_adm_cost_$trade_goods$
			value = 5
		}
		#Determine price increase on your own
		if = {
			limit = { has_country_flag = ever_selected_$trade_goods$ }
			change_variable = {
				which = final_ducat_price_$trade_goods$
				which = ducat_cost_$trade_goods$_own_counter
			}
			if = {
				limit = {
					check_variable = {
						which = final_adm_cost_$trade_goods$
						value = 1
					}
				}
				multiply_variable = {
					which = final_adm_cost_$trade_goods$
					which = ducat_cost_$trade_goods$_own_counter
				}
			}
		}
		multiply_variable = {
			which = final_ducat_price_$trade_goods$
			value = 10
		}
		multiply_variable = {
			which = final_ducat_price_$trade_goods$
			which = base_value_$trade_goods$
		}
	}
}

purchase_trade_goods = {
	custom_tooltip = ducat_price_for_$trade_goods$_tt
	if = {
		limit = {
			owner = {
				check_variable = {
					which = final_adm_cost_$trade_goods$
					value = 1
				}
			}
		}
		custom_tooltip = adm_price_for_$trade_goods$_tt
	}
	hidden_effect = {
		owner = {
			if = {
				limit = { NOT = { has_country_flag = ever_selected_$trade_goods$ } }
				set_country_flag = ever_selected_$trade_goods$
				set_variable = {
					which = ducat_cost_$trade_goods$_own_counter
					value = 1
				}
			}
			else = {
				change_variable = {
					which = ducat_cost_$trade_goods$_own_counter
					value = 1
				}
			}
			while = {
				limit = {
					check_variable = {
						which = final_ducat_price_$trade_goods$
						value = 1
					}
				}
				add_treasury = -1
				subtract_variable = {
					which = final_ducat_price_$trade_goods$
					value = 1
				}
			}
			if = {
				limit = {
					check_variable = {
						which = final_adm_cost_$trade_goods$
						value = 1
					}
				}
				while = {
					limit = {
						check_variable = {
							which = final_adm_cost_$trade_goods$
							value = 1
						}
					}
					add_adm_power = -1
					subtract_variable = {
						which = final_adm_cost_$trade_goods$
						value = 1
					}
				}
			}
		}
	}
	change_trade_goods = $trade_goods$
}

change_japan_formable_color = {
	if = { 
		limit = { was_tag = ASK }
		change_country_color = { 
			color = { 162  32  65 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = UES }
		change_country_color = { 
			color = { 200 200 200 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = TKI }
		change_country_color = { 
			color = { 86 84 162 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = SMZ }
		change_country_color = { 
			color = { 101 49 142 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = TKD }
		change_country_color = { 
			color = { 234 85 6 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = SOO }
		change_country_color = { 
			color = { 231 96 158 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = OUC }
		change_country_color = { 
			color = { 216 145 145 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = TKG }
		change_country_color = { 
			color = { 47 93 80 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = YMN }
		change_country_color = { 
			color = { 140 72 128 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = HSK }
		change_country_color = { 
			color = { 49 103 69 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = ODA }
		change_country_color = { 
			color = { 224 4 27 }
		}
		set_country_flag = has_overriden_color_flag
	}
	if = { 
		limit = { was_tag = SBA }
		change_country_color = { 
			color = { 0 163 175 }
		}
		set_country_flag = has_overriden_color_flag
	}
}

#civic_republicanism_focus_government
#civic_republicanism_focus_expansion
#civic_republicanism_focus_technology
#civic_republicanism_focus_stability
#civic_republicanism_focus_religion

#civic_republicanism_focus_diplomacy
#civic_republicanism_focus_court
#civic_republicanism_focus_trade
#civic_republicanism_focus_subjects
#civic_republicanism_focus_development

#civic_republicanism_focus_defensive
#civic_republicanism_focus_sieges
#civic_republicanism_focus_leaders
#civic_republicanism_focus_quality
#civic_republicanism_focus_naval

pre_select_possible_ruler_focus_adm = {
	random_list = {
		1 = { set_country_flag = civic_republicanism_focus_government_flag }
		1 = { set_country_flag = civic_republicanism_focus_expansion_flag }
		1 = { set_country_flag = civic_republicanism_focus_technology_flag }
		1 = { set_country_flag = civic_republicanism_focus_stability_flag }
		1 = { set_country_flag = civic_republicanism_focus_religion_flag }
	}
}
pre_select_possible_ruler_focus_dip = {
	random_list = {
		1 = { set_country_flag = civic_republicanism_focus_diplomacy_flag }
		1 = { set_country_flag = civic_republicanism_focus_court_flag }
		1 = { set_country_flag = civic_republicanism_focus_trade_flag }
		1 = { set_country_flag = civic_republicanism_focus_subjects_flag }
		1 = { set_country_flag = civic_republicanism_focus_development_flag }
	}
}
pre_select_possible_ruler_focus_mil = {
	random_list = {
		1 = { set_country_flag = civic_republicanism_focus_defensive_flag }
		1 = { set_country_flag = civic_republicanism_focus_sieges_flag }
		1 = { set_country_flag = civic_republicanism_focus_leaders_flag }
		1 = { set_country_flag = civic_republicanism_focus_quality_flag }
		1 = { set_country_flag = civic_republicanism_focus_naval_flag }
	}
}
pre_select_possible_ruler_focus_rng = {
	random_list = {
		1 = { set_country_flag = RNG_civic_republicanism_focus_government }
		1 = { set_country_flag = RNG_civic_republicanism_focus_expansion }
		1 = { set_country_flag = RNG_civic_republicanism_focus_technology }
		1 = { set_country_flag = RNG_civic_republicanism_focus_stability }
		1 = { set_country_flag = RNG_civic_republicanism_focus_religion }
		1 = { set_country_flag = RNG_civic_republicanism_focus_diplomacy }
		1 = { set_country_flag = RNG_civic_republicanism_focus_court }
		1 = { set_country_flag = RNG_civic_republicanism_focus_trade }
		1 = { set_country_flag = RNG_civic_republicanism_focus_subjects }
		1 = { set_country_flag = RNG_civic_republicanism_focus_development }
		1 = { set_country_flag = RNG_civic_republicanism_focus_defensive }
		1 = { set_country_flag = RNG_civic_republicanism_focus_sieges }
		1 = { set_country_flag = RNG_civic_republicanism_focus_leaders }
		1 = { set_country_flag = RNG_civic_republicanism_focus_quality }
		1 = { set_country_flag = RNG_civic_republicanism_focus_naval }
	}
}

pre_select_possible_ruler_focus = {
	pre_select_possible_ruler_focus_adm = yes
	pre_select_possible_ruler_focus_dip = yes
	pre_select_possible_ruler_focus_mil = yes
	pre_select_possible_ruler_focus_rng = yes
}

assign_ruler_focus_adm = {
	trigger_switch = {
		on_trigger = has_country_flag
		civic_republicanism_focus_government_flag = {	add_ruler_modifier = { name = civic_republicanism_focus_government	duration = -1 } }
		civic_republicanism_focus_expansion_flag = {	add_ruler_modifier = { name = civic_republicanism_focus_expansion	duration = -1 } }
		civic_republicanism_focus_technology_flag = {	add_ruler_modifier = { name = civic_republicanism_focus_technology	duration = -1 } }
		civic_republicanism_focus_stability_flag = {	add_ruler_modifier = { name = civic_republicanism_focus_stability	duration = -1 } }
		civic_republicanism_focus_religion_flag = {		add_ruler_modifier = { name = civic_republicanism_focus_religion	duration = -1 } }
	}
}
assign_ruler_focus_dip = {
	trigger_switch = {
		on_trigger = has_country_flag
		civic_republicanism_focus_diplomacy_flag = {	add_ruler_modifier = { name = civic_republicanism_focus_diplomacy	duration = -1 } }
		civic_republicanism_focus_court_flag = {		add_ruler_modifier = { name = civic_republicanism_focus_court		duration = -1 } }
		civic_republicanism_focus_trade_flag = {		add_ruler_modifier = { name = civic_republicanism_focus_trade		duration = -1 } }
		civic_republicanism_focus_subjects_flag = {		add_ruler_modifier = { name = civic_republicanism_focus_subjects	duration = -1 } }
		civic_republicanism_focus_development_flag = {	add_ruler_modifier = { name = civic_republicanism_focus_development	duration = -1 } }
	}
}
assign_ruler_focus_mil = {
	trigger_switch = {
		on_trigger = has_country_flag
		civic_republicanism_focus_defensive_flag = {	add_ruler_modifier = { name = civic_republicanism_focus_defensive	duration = -1 } }
		civic_republicanism_focus_sieges_flag = {		add_ruler_modifier = { name = civic_republicanism_focus_sieges		duration = -1 } }
		civic_republicanism_focus_leaders_flag = {		add_ruler_modifier = { name = civic_republicanism_focus_leaders		duration = -1 } }
		civic_republicanism_focus_quality_flag = {		add_ruler_modifier = { name = civic_republicanism_focus_quality		duration = -1 } }
		civic_republicanism_focus_naval_flag = {		add_ruler_modifier = { name = civic_republicanism_focus_naval		duration = -1 } }
	}
}
assign_ruler_focus_rng = {
	trigger_switch = {
		on_trigger = has_country_flag
		RNG_civic_republicanism_focus_government = { 	add_ruler_modifier = { name = civic_republicanism_focus_government	duration = -1 }	}
		RNG_civic_republicanism_focus_expansion = { 	add_ruler_modifier = { name = civic_republicanism_focus_expansion	duration = -1 }	}
		RNG_civic_republicanism_focus_technology = { 	add_ruler_modifier = { name = civic_republicanism_focus_technology	duration = -1 }	}
		RNG_civic_republicanism_focus_stability = { 	add_ruler_modifier = { name = civic_republicanism_focus_stability	duration = -1 }	}
		RNG_civic_republicanism_focus_religion = { 		add_ruler_modifier = { name = civic_republicanism_focus_religion	duration = -1 }	}
		RNG_civic_republicanism_focus_diplomacy = { 	add_ruler_modifier = { name = civic_republicanism_focus_diplomacy	duration = -1 }	}
		RNG_civic_republicanism_focus_court = { 		add_ruler_modifier = { name = civic_republicanism_focus_court		duration = -1 }	}
		RNG_civic_republicanism_focus_trade = { 		add_ruler_modifier = { name = civic_republicanism_focus_trade		duration = -1 }	}
		RNG_civic_republicanism_focus_subjects = { 		add_ruler_modifier = { name = civic_republicanism_focus_subjects	duration = -1 }	}
		RNG_civic_republicanism_focus_development = { 	add_ruler_modifier = { name = civic_republicanism_focus_development	duration = -1 }	}
		RNG_civic_republicanism_focus_defensive = { 	add_ruler_modifier = { name = civic_republicanism_focus_defensive	duration = -1 }	}
		RNG_civic_republicanism_focus_sieges = { 		add_ruler_modifier = { name = civic_republicanism_focus_sieges		duration = -1 }	}
		RNG_civic_republicanism_focus_leaders = { 		add_ruler_modifier = { name = civic_republicanism_focus_leaders		duration = -1 }	}
		RNG_civic_republicanism_focus_quality = { 		add_ruler_modifier = { name = civic_republicanism_focus_quality		duration = -1 }	}
		RNG_civic_republicanism_focus_naval = { 		add_ruler_modifier = { name = civic_republicanism_focus_naval		duration = -1 }	}
	}
}

assign_ruler_focus = {
	assign_ruler_focus_$type$ = yes
}

post_ruler_focus_clearance = {
	hidden_effect = {
		clr_country_flag = civic_republicanism_focus_government_flag
		clr_country_flag = civic_republicanism_focus_expansion_flag
		clr_country_flag = civic_republicanism_focus_technology_flag
		clr_country_flag = civic_republicanism_focus_stability_flag
		clr_country_flag = civic_republicanism_focus_religion_flag
		clr_country_flag = civic_republicanism_focus_diplomacy_flag
		clr_country_flag = civic_republicanism_focus_court_flag
		clr_country_flag = civic_republicanism_focus_trade_flag
		clr_country_flag = civic_republicanism_focus_subjects_flag
		clr_country_flag = civic_republicanism_focus_development_flag
		clr_country_flag = civic_republicanism_focus_defensive_flag
		clr_country_flag = civic_republicanism_focus_sieges_flag
		clr_country_flag = civic_republicanism_focus_leaders_flag
		clr_country_flag = civic_republicanism_focus_quality_flag
		clr_country_flag = civic_republicanism_focus_naval_flag
		clr_country_flag = RNG_civic_republicanism_focus_government
		clr_country_flag = RNG_civic_republicanism_focus_expansion
		clr_country_flag = RNG_civic_republicanism_focus_technology
		clr_country_flag = RNG_civic_republicanism_focus_stability
		clr_country_flag = RNG_civic_republicanism_focus_religion
		clr_country_flag = RNG_civic_republicanism_focus_diplomacy
		clr_country_flag = RNG_civic_republicanism_focus_court
		clr_country_flag = RNG_civic_republicanism_focus_trade
		clr_country_flag = RNG_civic_republicanism_focus_subjects
		clr_country_flag = RNG_civic_republicanism_focus_development
		clr_country_flag = RNG_civic_republicanism_focus_defensive
		clr_country_flag = RNG_civic_republicanism_focus_sieges
		clr_country_flag = RNG_civic_republicanism_focus_leaders
		clr_country_flag = RNG_civic_republicanism_focus_quality
		clr_country_flag = RNG_civic_republicanism_focus_naval
	}
}

clr_ruler_focus_modifiers = {
	post_ruler_focus_clearance = yes
	if = { limit = { has_country_modifier = civic_republicanism_focus_government } 	remove_country_modifier = civic_republicanism_focus_government	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_expansion } 	remove_country_modifier = civic_republicanism_focus_expansion	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_technology } 	remove_country_modifier = civic_republicanism_focus_technology	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_stability } 	remove_country_modifier = civic_republicanism_focus_stability	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_religion } 	remove_country_modifier = civic_republicanism_focus_religion	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_diplomacy } 	remove_country_modifier = civic_republicanism_focus_diplomacy	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_court } 		remove_country_modifier = civic_republicanism_focus_court		}
	if = { limit = { has_country_modifier = civic_republicanism_focus_trade } 		remove_country_modifier = civic_republicanism_focus_trade		}
	if = { limit = { has_country_modifier = civic_republicanism_focus_subjects } 	remove_country_modifier = civic_republicanism_focus_subjects	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_development } remove_country_modifier = civic_republicanism_focus_development	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_defensive } 	remove_country_modifier = civic_republicanism_focus_defensive	}
	if = { limit = { has_country_modifier = civic_republicanism_focus_sieges } 		remove_country_modifier = civic_republicanism_focus_sieges		}
	if = { limit = { has_country_modifier = civic_republicanism_focus_leaders } 	remove_country_modifier = civic_republicanism_focus_leaders		}
	if = { limit = { has_country_modifier = civic_republicanism_focus_quality } 	remove_country_modifier = civic_republicanism_focus_quality		}
	if = { limit = { has_country_modifier = civic_republicanism_focus_naval } 		remove_country_modifier = civic_republicanism_focus_naval		}
}